import { BorderRadius } from "../../classes/borderRadius";
import { ConicalGradient, LinearGradient, RadialGradient } from "../../classes/gradient";
import { C2DShapePartTransformed, C2DStandaloneTransformed } from "../../mixins/transform";
import { Canvas2DCanvasElement } from "./canvas";
declare const Canvas2DRectangle_base: {
    new (...args: any[]): {
        "__#24@#borderRadius": BorderRadius | null;
        attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
        "__#24@#borderRadiusChangeListener": () => void;
        /**
         *
         */
        get borderRadius(): BorderRadius | null;
        set borderRadius(value: BorderRadius | number | null);
        render(canvas2D: Canvas2DCanvasElement): void;
        renderRadialGradient(context: CanvasRenderingContext2D, gradient: RadialGradient): CanvasGradient;
        renderConicalGradient: ((context: CanvasRenderingContext2D, gradient: ConicalGradient) => CanvasGradient) & ((context: CanvasRenderingContext2D, gradient: ConicalGradient) => CanvasGradient);
        renderLinearGradient: ((context: CanvasRenderingContext2D, gradient: LinearGradient) => CanvasGradient) & ((context: CanvasRenderingContext2D, gradient: LinearGradient) => CanvasGradient);
        "__#19@#origin": "center" | "topLeft";
        readonly topLeft: import("../..").Vector2D;
        readonly topRight: import("../..").Vector2D;
        readonly center: import("../..").Vector2D;
        readonly bottomLeft: import("../..").Vector2D;
        readonly bottomRight: import("../..").Vector2D;
        origin: "center" | "topLeft";
        "__#18@#width": number;
        "__#18@#height": number;
        width: number;
        height: number;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange: (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void) & (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void);
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        removeEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#27@#offset": import("../..").Vector2D;
        moveOffset(x: number, y: number): void;
        "__#27@#offsetChangeListener": ChangeListener<import("../../classes/vector2d").Vector2DBase>;
        offset: import("../..").Vector2D;
        "__#29@#changedSinceRender": boolean;
        "__#29@#clickListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#localMouse": import("../../classes/mouse").MouseData;
        "__#29@#mouseListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#shadow": import("../..").Shadow | null;
        readonly changedSinceRender: boolean;
        "__#29@#handleClick"(canvas2D: Canvas2DCanvasElement): void;
        "__#29@#handleMouse"(canvas2D: Canvas2DCanvasElement): void;
        renderChildren(canvas2D: Canvas2DCanvasElement): void;
        afterRender: ((canvas2D: Canvas2DCanvasElement) => void) & ((canvas2D: Canvas2DCanvasElement) => void);
        "__#29@#shadowChangeListener": ChangeListener<import("../..").Shadow>;
        shadow: import("../..").Shadow | null;
        "__#9@#eventProxy": {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        "__#9@#everyFrame": Updater | null;
        readonly canvas: Canvas2DCanvasElement;
        everyFrame: Updater | null;
        readonly listen: {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        scaleByPixelRatio(vector: import("../..").Vector2D): import("../..").Vector2D;
        "__#22@#anchor": import("../..").Vector2D;
        "__#22@#angle": import("../..").Angle;
        "__#22@#angularVelocity": import("../..").Angle;
        "__#22@#scale": import("../..").Vector2D;
        "__#22@#velocity": import("../..").Vector2D;
        "__#22@#angleChangeListener": ChangeListener<number>;
        angle: import("../..").Angle;
        "__#22@#angularVelocityChangedTime": number;
        angularVelocity: import("../..").Angle;
        anchor: import("../..").Vector2D;
        "__#22@#anchorChangeListener": ChangeListener<import("../../classes/vector2d").Vector2DBase>;
        _applyMovement(deltaTime: number): void;
        moveAnchor(x: number, y: number): void;
        rotateClockwise(angle: import("../..").Angle): void;
        rotateCounterclockwise(angle: import("../..").Angle): void;
        get scale(): import("../..").Vector2D;
        set scale(value: import("../..").Vector2D | number);
        "__#22@#velocityChangedTime": number;
        velocity: import("../..").Vector2D;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        render(canvas2D: Canvas2DCanvasElement): void;
        afterRender(canvas2D: Canvas2DCanvasElement): void;
        "__#20@#stroke": import("../../classes/gradient").DrawStyle | null;
        "__#20@#lineWidth": number | null;
        lineWidth: number | null;
        stroke: import("../../classes/gradient").DrawStyle | null;
        attributeChangedCallback: ((name: string, oldValue: string | null, newValue: string | null) => void) & ((name: string, oldValue: string | null, newValue: string | null) => void);
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange: (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void) & (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void);
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        removeEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#29@#changedSinceRender": boolean;
        "__#29@#clickListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#localMouse": import("../../classes/mouse").MouseData;
        "__#29@#mouseListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#shadow": import("../..").Shadow | null;
        renderConicalGradient(context: CanvasRenderingContext2D, gradient: ConicalGradient): CanvasGradient;
        renderLinearGradient(context: CanvasRenderingContext2D, gradient: LinearGradient): CanvasGradient;
        renderRadialGradient(context: CanvasRenderingContext2D, gradient: RadialGradient): CanvasGradient;
        readonly changedSinceRender: boolean;
        "__#29@#handleClick"(canvas2D: Canvas2DCanvasElement): void;
        "__#29@#handleMouse"(canvas2D: Canvas2DCanvasElement): void;
        renderChildren(canvas2D: Canvas2DCanvasElement): void;
        "__#29@#shadowChangeListener": ChangeListener<import("../..").Shadow>;
        shadow: import("../..").Shadow | null;
        "__#9@#eventProxy": {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        "__#9@#everyFrame": Updater | null;
        readonly canvas: Canvas2DCanvasElement;
        everyFrame: Updater | null;
        readonly listen: {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        scaleByPixelRatio(vector: import("../..").Vector2D): import("../..").Vector2D;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        render(canvas2D: Canvas2DCanvasElement): void;
        afterRender(canvas2D: Canvas2DCanvasElement): void;
        "__#30@#fill": import("../../classes/gradient").DrawStyle | null;
        fill: import("../../classes/gradient").DrawStyle | null;
        attributeChangedCallback: ((name: string, oldValue: string | null, newValue: string | null) => void) & ((name: string, oldValue: string | null, newValue: string | null) => void);
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange: (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void) & (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void);
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        removeEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#29@#changedSinceRender": boolean;
        "__#29@#clickListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#localMouse": import("../../classes/mouse").MouseData;
        "__#29@#mouseListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#shadow": import("../..").Shadow | null;
        renderConicalGradient(context: CanvasRenderingContext2D, gradient: ConicalGradient): CanvasGradient;
        renderLinearGradient(context: CanvasRenderingContext2D, gradient: LinearGradient): CanvasGradient;
        renderRadialGradient(context: CanvasRenderingContext2D, gradient: RadialGradient): CanvasGradient;
        readonly changedSinceRender: boolean;
        "__#29@#handleClick"(canvas2D: Canvas2DCanvasElement): void;
        "__#29@#handleMouse"(canvas2D: Canvas2DCanvasElement): void;
        renderChildren(canvas2D: Canvas2DCanvasElement): void;
        "__#29@#shadowChangeListener": ChangeListener<import("../..").Shadow>;
        shadow: import("../..").Shadow | null;
        "__#9@#eventProxy": {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        "__#9@#everyFrame": Updater | null;
        readonly canvas: Canvas2DCanvasElement;
        everyFrame: Updater | null;
        readonly listen: {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        scaleByPixelRatio(vector: import("../..").Vector2D): import("../..").Vector2D;
    };
    observedAttributes: string[];
    tag: string;
} & typeof C2DStandaloneTransformed;
export declare class Canvas2DRectangle extends Canvas2DRectangle_base {
    static get tag(): string;
}
declare const Canvas2DShapeRectangle_base: {
    new (...args: any[]): {
        "__#24@#borderRadius": BorderRadius | null;
        attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
        "__#24@#borderRadiusChangeListener": () => void;
        /**
         *
         */
        get borderRadius(): BorderRadius | null;
        set borderRadius(value: BorderRadius | number | null);
        render(canvas2D: Canvas2DCanvasElement): void;
        renderRadialGradient(context: CanvasRenderingContext2D, gradient: RadialGradient): CanvasGradient;
        renderConicalGradient: ((context: CanvasRenderingContext2D, gradient: ConicalGradient) => CanvasGradient) & ((context: CanvasRenderingContext2D, gradient: ConicalGradient) => CanvasGradient);
        renderLinearGradient: ((context: CanvasRenderingContext2D, gradient: LinearGradient) => CanvasGradient) & ((context: CanvasRenderingContext2D, gradient: LinearGradient) => CanvasGradient);
        "__#19@#origin": "center" | "topLeft";
        readonly topLeft: import("../..").Vector2D;
        readonly topRight: import("../..").Vector2D;
        readonly center: import("../..").Vector2D;
        readonly bottomLeft: import("../..").Vector2D;
        readonly bottomRight: import("../..").Vector2D;
        origin: "center" | "topLeft";
        "__#18@#width": number;
        "__#18@#height": number;
        width: number;
        height: number;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange: (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void) & (<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]) => void);
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        removeEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#27@#offset": import("../..").Vector2D;
        moveOffset(x: number, y: number): void;
        "__#27@#offsetChangeListener": ChangeListener<import("../../classes/vector2d").Vector2DBase>;
        offset: import("../..").Vector2D;
        "__#29@#changedSinceRender": boolean;
        "__#29@#clickListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#localMouse": import("../../classes/mouse").MouseData;
        "__#29@#mouseListeners": Set<EventListenerOrEventListenerObject>;
        "__#29@#shadow": import("../..").Shadow | null;
        readonly changedSinceRender: boolean;
        "__#29@#handleClick"(canvas2D: Canvas2DCanvasElement): void;
        "__#29@#handleMouse"(canvas2D: Canvas2DCanvasElement): void;
        renderChildren(canvas2D: Canvas2DCanvasElement): void;
        afterRender: ((canvas2D: Canvas2DCanvasElement) => void) & ((canvas2D: Canvas2DCanvasElement) => void);
        "__#29@#shadowChangeListener": ChangeListener<import("../..").Shadow>;
        shadow: import("../..").Shadow | null;
        "__#9@#eventProxy": {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        "__#9@#everyFrame": Updater | null;
        readonly canvas: Canvas2DCanvasElement;
        everyFrame: Updater | null;
        readonly listen: {
            readonly fullscreenchange: (listener: TypedEventListener<"fullscreenchange">) => void;
            readonly fullscreenerror: (listener: TypedEventListener<"fullscreenerror">) => void;
            readonly abort: (listener: TypedEventListener<"abort">) => void;
            readonly animationcancel: (listener: TypedEventListener<"animationcancel">) => void;
            readonly animationend: (listener: TypedEventListener<"animationend">) => void;
            readonly animationiteration: (listener: TypedEventListener<"animationiteration">) => void;
            readonly animationstart: (listener: TypedEventListener<"animationstart">) => void;
            readonly auxclick: (listener: TypedEventListener<"auxclick">) => void;
            readonly beforeinput: (listener: TypedEventListener<"beforeinput">) => void;
            readonly beforetoggle: (listener: TypedEventListener<"beforetoggle">) => void;
            readonly blur: (listener: TypedEventListener<"blur">) => void;
            readonly cancel: (listener: TypedEventListener<"cancel">) => void;
            readonly canplay: (listener: TypedEventListener<"canplay">) => void;
            readonly canplaythrough: (listener: TypedEventListener<"canplaythrough">) => void;
            readonly change: (listener: TypedEventListener<"change">) => void;
            readonly click: (listener: TypedEventListener<"click">) => void;
            readonly close: (listener: TypedEventListener<"close">) => void;
            readonly compositionend: (listener: TypedEventListener<"compositionend">) => void;
            readonly compositionstart: (listener: TypedEventListener<"compositionstart">) => void;
            readonly compositionupdate: (listener: TypedEventListener<"compositionupdate">) => void;
            readonly contextlost: (listener: TypedEventListener<"contextlost">) => void;
            readonly contextmenu: (listener: TypedEventListener<"contextmenu">) => void;
            readonly contextrestored: (listener: TypedEventListener<"contextrestored">) => void;
            readonly copy: (listener: TypedEventListener<"copy">) => void;
            readonly cuechange: (listener: TypedEventListener<"cuechange">) => void;
            readonly cut: (listener: TypedEventListener<"cut">) => void;
            readonly dblclick: (listener: TypedEventListener<"dblclick">) => void;
            readonly drag: (listener: TypedEventListener<"drag">) => void;
            readonly dragend: (listener: TypedEventListener<"dragend">) => void;
            readonly dragenter: (listener: TypedEventListener<"dragenter">) => void;
            readonly dragleave: (listener: TypedEventListener<"dragleave">) => void;
            readonly dragover: (listener: TypedEventListener<"dragover">) => void;
            readonly dragstart: (listener: TypedEventListener<"dragstart">) => void;
            readonly drop: (listener: TypedEventListener<"drop">) => void;
            readonly durationchange: (listener: TypedEventListener<"durationchange">) => void;
            readonly emptied: (listener: TypedEventListener<"emptied">) => void;
            readonly ended: (listener: TypedEventListener<"ended">) => void;
            readonly error: (listener: TypedEventListener<"error">) => void;
            readonly focus: (listener: TypedEventListener<"focus">) => void;
            readonly focusin: (listener: TypedEventListener<"focusin">) => void;
            readonly focusout: (listener: TypedEventListener<"focusout">) => void;
            readonly formdata: (listener: TypedEventListener<"formdata">) => void;
            readonly gotpointercapture: (listener: TypedEventListener<"gotpointercapture">) => void;
            readonly input: (listener: TypedEventListener<"input">) => void;
            readonly invalid: (listener: TypedEventListener<"invalid">) => void;
            readonly keydown: (listener: TypedEventListener<"keydown">) => void;
            readonly keypress: (listener: TypedEventListener<"keypress">) => void;
            readonly keyup: (listener: TypedEventListener<"keyup">) => void;
            readonly load: (listener: TypedEventListener<"load">) => void;
            readonly loadeddata: (listener: TypedEventListener<"loadeddata">) => void;
            readonly loadedmetadata: (listener: TypedEventListener<"loadedmetadata">) => void;
            readonly loadstart: (listener: TypedEventListener<"loadstart">) => void;
            readonly lostpointercapture: (listener: TypedEventListener<"lostpointercapture">) => void;
            readonly mousedown: (listener: TypedEventListener<"mousedown">) => void;
            readonly mouseenter: (listener: TypedEventListener<"mouseenter">) => void;
            readonly mouseleave: (listener: TypedEventListener<"mouseleave">) => void;
            readonly mousemove: (listener: TypedEventListener<"mousemove">) => void;
            readonly mouseout: (listener: TypedEventListener<"mouseout">) => void;
            readonly mouseover: (listener: TypedEventListener<"mouseover">) => void;
            readonly mouseup: (listener: TypedEventListener<"mouseup">) => void;
            readonly paste: (listener: TypedEventListener<"paste">) => void;
            readonly pause: (listener: TypedEventListener<"pause">) => void;
            readonly play: (listener: TypedEventListener<"play">) => void;
            readonly playing: (listener: TypedEventListener<"playing">) => void;
            readonly pointercancel: (listener: TypedEventListener<"pointercancel">) => void;
            readonly pointerdown: (listener: TypedEventListener<"pointerdown">) => void;
            readonly pointerenter: (listener: TypedEventListener<"pointerenter">) => void;
            readonly pointerleave: (listener: TypedEventListener<"pointerleave">) => void;
            readonly pointermove: (listener: TypedEventListener<"pointermove">) => void;
            readonly pointerout: (listener: TypedEventListener<"pointerout">) => void;
            readonly pointerover: (listener: TypedEventListener<"pointerover">) => void;
            readonly pointerup: (listener: TypedEventListener<"pointerup">) => void;
            readonly progress: (listener: TypedEventListener<"progress">) => void;
            readonly ratechange: (listener: TypedEventListener<"ratechange">) => void;
            readonly reset: (listener: TypedEventListener<"reset">) => void;
            readonly resize: (listener: TypedEventListener<"resize">) => void;
            readonly scroll: (listener: TypedEventListener<"scroll">) => void;
            readonly scrollend: (listener: TypedEventListener<"scrollend">) => void;
            readonly securitypolicyviolation: (listener: TypedEventListener<"securitypolicyviolation">) => void;
            readonly seeked: (listener: TypedEventListener<"seeked">) => void;
            readonly seeking: (listener: TypedEventListener<"seeking">) => void;
            readonly select: (listener: TypedEventListener<"select">) => void;
            readonly selectionchange: (listener: TypedEventListener<"selectionchange">) => void;
            readonly selectstart: (listener: TypedEventListener<"selectstart">) => void;
            readonly slotchange: (listener: TypedEventListener<"slotchange">) => void;
            readonly stalled: (listener: TypedEventListener<"stalled">) => void;
            readonly submit: (listener: TypedEventListener<"submit">) => void;
            readonly suspend: (listener: TypedEventListener<"suspend">) => void;
            readonly timeupdate: (listener: TypedEventListener<"timeupdate">) => void;
            readonly toggle: (listener: TypedEventListener<"toggle">) => void;
            readonly touchcancel: (listener: TypedEventListener<"touchcancel">) => void;
            readonly touchend: (listener: TypedEventListener<"touchend">) => void;
            readonly touchmove: (listener: TypedEventListener<"touchmove">) => void;
            readonly touchstart: (listener: TypedEventListener<"touchstart">) => void;
            readonly transitioncancel: (listener: TypedEventListener<"transitioncancel">) => void;
            readonly transitionend: (listener: TypedEventListener<"transitionend">) => void;
            readonly transitionrun: (listener: TypedEventListener<"transitionrun">) => void;
            readonly transitionstart: (listener: TypedEventListener<"transitionstart">) => void;
            readonly volumechange: (listener: TypedEventListener<"volumechange">) => void;
            readonly waiting: (listener: TypedEventListener<"waiting">) => void;
            readonly webkitanimationend: (listener: TypedEventListener<"webkitanimationend">) => void;
            readonly webkitanimationiteration: (listener: TypedEventListener<"webkitanimationiteration">) => void;
            readonly webkitanimationstart: (listener: TypedEventListener<"webkitanimationstart">) => void;
            readonly webkittransitionend: (listener: TypedEventListener<"webkittransitionend">) => void;
            readonly wheel: (listener: TypedEventListener<"wheel">) => void;
        };
        scaleByPixelRatio(vector: import("../..").Vector2D): import("../..").Vector2D;
        "__#22@#anchor": import("../..").Vector2D;
        "__#22@#angle": import("../..").Angle;
        "__#22@#angularVelocity": import("../..").Angle;
        "__#22@#scale": import("../..").Vector2D;
        "__#22@#velocity": import("../..").Vector2D;
        "__#22@#angleChangeListener": ChangeListener<number>;
        angle: import("../..").Angle;
        "__#22@#angularVelocityChangedTime": number;
        angularVelocity: import("../..").Angle;
        anchor: import("../..").Vector2D;
        "__#22@#anchorChangeListener": ChangeListener<import("../../classes/vector2d").Vector2DBase>;
        _applyMovement(deltaTime: number): void;
        moveAnchor(x: number, y: number): void;
        rotateClockwise(angle: import("../..").Angle): void;
        rotateCounterclockwise(angle: import("../..").Angle): void;
        get scale(): import("../..").Vector2D;
        set scale(value: import("../..").Vector2D | number);
        "__#22@#velocityChangedTime": number;
        velocity: import("../..").Vector2D;
    };
    observedAttributes: string[];
    tag: string;
} & typeof C2DShapePartTransformed;
export declare class Canvas2DShapeRectangle extends Canvas2DShapeRectangle_base {
    static get tag(): string;
}
declare const SVGRectangleController_base: {
    new (...args: any[]): {
        connectedCallback(): void;
        lineWidth: number | null;
        stroke: import("../../classes/gradient").DrawStyle | null;
        "__#21@#strokeGradient"(gradient: import("../../classes/gradient").Gradient): void;
        readonly _styleAttributes: {
            connectedCallback?: string | undefined;
            lineWidth?: number | null;
            stroke?: import("../../classes/gradient").DrawStyle | null;
            readonly _styleAttributes?: string | undefined;
            attributeChangedCallback?: string | undefined;
            createChild?: string | undefined;
            registerChange?: string | undefined;
            accessKey?: string | undefined;
            readonly accessKeyLabel?: string | undefined;
            autocapitalize?: string | undefined;
            dir?: string | undefined;
            draggable?: string | undefined;
            hidden?: string | undefined;
            inert?: string | undefined;
            innerText?: string | undefined;
            lang?: string | undefined;
            readonly offsetHeight?: string | undefined;
            readonly offsetLeft?: string | undefined;
            readonly offsetParent?: string | undefined;
            readonly offsetTop?: string | undefined;
            readonly offsetWidth?: string | undefined;
            outerText?: string | undefined;
            popover?: string | undefined;
            spellcheck?: string | undefined;
            title?: string | undefined;
            translate?: string | undefined;
            writingSuggestions?: string | undefined;
            attachInternals?: string | undefined;
            click?: string | undefined;
            hidePopover?: string | undefined;
            showPopover?: string | undefined;
            togglePopover?: string | undefined;
            addEventListener?: string | undefined;
            removeEventListener?: string | undefined;
            readonly attributes?: string | undefined;
            readonly classList?: string | undefined;
            className?: string | undefined;
            readonly clientHeight?: string | undefined;
            readonly clientLeft?: string | undefined;
            readonly clientTop?: string | undefined;
            readonly clientWidth?: string | undefined;
            readonly currentCSSZoom?: string | undefined;
            id?: string | undefined;
            innerHTML?: string | undefined;
            readonly localName?: string | undefined;
            readonly namespaceURI?: string | undefined;
            onfullscreenchange?: string | undefined;
            onfullscreenerror?: string | undefined;
            outerHTML?: string | undefined;
            readonly ownerDocument?: string | undefined;
            readonly part?: string | undefined;
            readonly prefix?: string | undefined;
            readonly scrollHeight?: string | undefined;
            scrollLeft?: string | undefined;
            scrollTop?: string | undefined;
            readonly scrollWidth?: string | undefined;
            readonly shadowRoot?: string | undefined;
            slot?: string | undefined;
            readonly tagName?: string | undefined;
            attachShadow?: string | undefined;
            checkVisibility?: string | undefined;
            closest?: string | undefined;
            computedStyleMap?: string | undefined;
            getAttribute?: string | undefined;
            getAttributeNS?: string | undefined;
            getAttributeNames?: string | undefined;
            getAttributeNode?: string | undefined;
            getAttributeNodeNS?: string | undefined;
            getBoundingClientRect?: string | undefined;
            getClientRects?: string | undefined;
            getElementsByClassName?: string | undefined;
            getElementsByTagName?: string | undefined;
            getElementsByTagNameNS?: string | undefined;
            getHTML?: string | undefined;
            hasAttribute?: string | undefined;
            hasAttributeNS?: string | undefined;
            hasAttributes?: string | undefined;
            hasPointerCapture?: string | undefined;
            insertAdjacentElement?: string | undefined;
            insertAdjacentHTML?: string | undefined;
            insertAdjacentText?: string | undefined;
            matches?: string | undefined;
            releasePointerCapture?: string | undefined;
            removeAttribute?: string | undefined;
            removeAttributeNS?: string | undefined;
            removeAttributeNode?: string | undefined;
            requestFullscreen?: string | undefined;
            requestPointerLock?: string | undefined;
            scroll?: string | undefined;
            scrollBy?: string | undefined;
            scrollIntoView?: string | undefined;
            scrollTo?: string | undefined;
            setAttribute?: string | undefined;
            setAttributeNS?: string | undefined;
            setAttributeNode?: string | undefined;
            setAttributeNodeNS?: string | undefined;
            setHTMLUnsafe?: string | undefined;
            setPointerCapture?: string | undefined;
            toggleAttribute?: string | undefined;
            webkitMatchesSelector?: string | undefined;
            readonly baseURI?: string | undefined;
            readonly childNodes?: string | undefined;
            readonly firstChild?: string | undefined;
            readonly isConnected?: string | undefined;
            readonly lastChild?: string | undefined;
            readonly nextSibling?: string | undefined;
            readonly nodeName?: string | undefined;
            readonly nodeType?: string | undefined;
            nodeValue?: string | undefined;
            readonly parentElement?: string | undefined;
            readonly parentNode?: string | undefined;
            readonly previousSibling?: string | undefined;
            textContent?: string | undefined;
            appendChild?: string | undefined;
            cloneNode?: string | undefined;
            compareDocumentPosition?: string | undefined;
            contains?: string | undefined;
            getRootNode?: string | undefined;
            hasChildNodes?: string | undefined;
            insertBefore?: string | undefined;
            isDefaultNamespace?: string | undefined;
            isEqualNode?: string | undefined;
            isSameNode?: string | undefined;
            lookupNamespaceURI?: string | undefined;
            lookupPrefix?: string | undefined;
            normalize?: string | undefined;
            removeChild?: string | undefined;
            replaceChild?: string | undefined;
            readonly ELEMENT_NODE?: string | undefined;
            readonly ATTRIBUTE_NODE?: string | undefined;
            readonly TEXT_NODE?: string | undefined;
            readonly CDATA_SECTION_NODE?: string | undefined;
            readonly ENTITY_REFERENCE_NODE?: string | undefined;
            readonly ENTITY_NODE?: string | undefined;
            readonly PROCESSING_INSTRUCTION_NODE?: string | undefined;
            readonly COMMENT_NODE?: string | undefined;
            readonly DOCUMENT_NODE?: string | undefined;
            readonly DOCUMENT_TYPE_NODE?: string | undefined;
            readonly DOCUMENT_FRAGMENT_NODE?: string | undefined;
            readonly NOTATION_NODE?: string | undefined;
            readonly DOCUMENT_POSITION_DISCONNECTED?: string | undefined;
            readonly DOCUMENT_POSITION_PRECEDING?: string | undefined;
            readonly DOCUMENT_POSITION_FOLLOWING?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINS?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINED_BY?: string | undefined;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: string | undefined;
            dispatchEvent?: string | undefined;
            ariaAtomic?: string | undefined;
            ariaAutoComplete?: string | undefined;
            ariaBrailleLabel?: string | undefined;
            ariaBrailleRoleDescription?: string | undefined;
            ariaBusy?: string | undefined;
            ariaChecked?: string | undefined;
            ariaColCount?: string | undefined;
            ariaColIndex?: string | undefined;
            ariaColIndexText?: string | undefined;
            ariaColSpan?: string | undefined;
            ariaCurrent?: string | undefined;
            ariaDescription?: string | undefined;
            ariaDisabled?: string | undefined;
            ariaExpanded?: string | undefined;
            ariaHasPopup?: string | undefined;
            ariaHidden?: string | undefined;
            ariaInvalid?: string | undefined;
            ariaKeyShortcuts?: string | undefined;
            ariaLabel?: string | undefined;
            ariaLevel?: string | undefined;
            ariaLive?: string | undefined;
            ariaModal?: string | undefined;
            ariaMultiLine?: string | undefined;
            ariaMultiSelectable?: string | undefined;
            ariaOrientation?: string | undefined;
            ariaPlaceholder?: string | undefined;
            ariaPosInSet?: string | undefined;
            ariaPressed?: string | undefined;
            ariaReadOnly?: string | undefined;
            ariaRequired?: string | undefined;
            ariaRoleDescription?: string | undefined;
            ariaRowCount?: string | undefined;
            ariaRowIndex?: string | undefined;
            ariaRowIndexText?: string | undefined;
            ariaRowSpan?: string | undefined;
            ariaSelected?: string | undefined;
            ariaSetSize?: string | undefined;
            ariaSort?: string | undefined;
            ariaValueMax?: string | undefined;
            ariaValueMin?: string | undefined;
            ariaValueNow?: string | undefined;
            ariaValueText?: string | undefined;
            role?: string | undefined;
            animate?: string | undefined;
            getAnimations?: string | undefined;
            after?: string | undefined;
            before?: string | undefined;
            remove?: string | undefined;
            replaceWith?: string | undefined;
            readonly nextElementSibling?: string | undefined;
            readonly previousElementSibling?: string | undefined;
            readonly childElementCount?: string | undefined;
            readonly children?: string | undefined;
            readonly firstElementChild?: string | undefined;
            readonly lastElementChild?: string | undefined;
            append?: string | undefined;
            prepend?: string | undefined;
            querySelector?: string | undefined;
            querySelectorAll?: string | undefined;
            replaceChildren?: string | undefined;
            readonly assignedSlot?: string | undefined;
            readonly attributeStyleMap?: string | undefined;
            readonly style?: string | undefined;
            contentEditable?: string | undefined;
            enterKeyHint?: string | undefined;
            inputMode?: string | undefined;
            readonly isContentEditable?: string | undefined;
            onabort?: string | undefined;
            onanimationcancel?: string | undefined;
            onanimationend?: string | undefined;
            onanimationiteration?: string | undefined;
            onanimationstart?: string | undefined;
            onauxclick?: string | undefined;
            onbeforeinput?: string | undefined;
            onbeforetoggle?: string | undefined;
            onblur?: string | undefined;
            oncancel?: string | undefined;
            oncanplay?: string | undefined;
            oncanplaythrough?: string | undefined;
            onchange?: string | undefined;
            onclick?: string | undefined;
            onclose?: string | undefined;
            oncontextlost?: string | undefined;
            oncontextmenu?: string | undefined;
            oncontextrestored?: string | undefined;
            oncopy?: string | undefined;
            oncuechange?: string | undefined;
            oncut?: string | undefined;
            ondblclick?: string | undefined;
            ondrag?: string | undefined;
            ondragend?: string | undefined;
            ondragenter?: string | undefined;
            ondragleave?: string | undefined;
            ondragover?: string | undefined;
            ondragstart?: string | undefined;
            ondrop?: string | undefined;
            ondurationchange?: string | undefined;
            onemptied?: string | undefined;
            onended?: string | undefined;
            onerror?: string | undefined;
            onfocus?: string | undefined;
            onformdata?: string | undefined;
            ongotpointercapture?: string | undefined;
            oninput?: string | undefined;
            oninvalid?: string | undefined;
            onkeydown?: string | undefined;
            onkeypress?: string | undefined;
            onkeyup?: string | undefined;
            onload?: string | undefined;
            onloadeddata?: string | undefined;
            onloadedmetadata?: string | undefined;
            onloadstart?: string | undefined;
            onlostpointercapture?: string | undefined;
            onmousedown?: string | undefined;
            onmouseenter?: string | undefined;
            onmouseleave?: string | undefined;
            onmousemove?: string | undefined;
            onmouseout?: string | undefined;
            onmouseover?: string | undefined;
            onmouseup?: string | undefined;
            onpaste?: string | undefined;
            onpause?: string | undefined;
            onplay?: string | undefined;
            onplaying?: string | undefined;
            onpointercancel?: string | undefined;
            onpointerdown?: string | undefined;
            onpointerenter?: string | undefined;
            onpointerleave?: string | undefined;
            onpointermove?: string | undefined;
            onpointerout?: string | undefined;
            onpointerover?: string | undefined;
            onpointerup?: string | undefined;
            onprogress?: string | undefined;
            onratechange?: string | undefined;
            onreset?: string | undefined;
            onresize?: string | undefined;
            onscroll?: string | undefined;
            onscrollend?: string | undefined;
            onsecuritypolicyviolation?: string | undefined;
            onseeked?: string | undefined;
            onseeking?: string | undefined;
            onselect?: string | undefined;
            onselectionchange?: string | undefined;
            onselectstart?: string | undefined;
            onslotchange?: string | undefined;
            onstalled?: string | undefined;
            onsubmit?: string | undefined;
            onsuspend?: string | undefined;
            ontimeupdate?: string | undefined;
            ontoggle?: string | undefined;
            ontouchcancel?: string | undefined;
            ontouchend?: string | undefined;
            ontouchmove?: string | undefined;
            ontouchstart?: string | undefined;
            ontransitioncancel?: string | undefined;
            ontransitionend?: string | undefined;
            ontransitionrun?: string | undefined;
            ontransitionstart?: string | undefined;
            onvolumechange?: string | undefined;
            onwaiting?: string | undefined;
            onwebkitanimationend?: string | undefined;
            onwebkitanimationiteration?: string | undefined;
            onwebkitanimationstart?: string | undefined;
            onwebkittransitionend?: string | undefined;
            onwheel?: string | undefined;
            autofocus?: string | undefined;
            readonly dataset?: string | undefined;
            nonce?: string | undefined;
            tabIndex?: string | undefined;
            blur?: string | undefined;
            focus?: string | undefined;
            readonly group?: SVGGElement | null;
            readonly mainElement?: SVGElementTagNameMap[T];
            _setStyleAttribute?: string | undefined;
            readonly svgContainer?: SVGSVGElement | null;
            readonly svgContainerController?: import("./svgSVG").SVGSVGController | null;
        };
        "__#20@#stroke": import("../../classes/gradient").DrawStyle | null;
        "__#20@#lineWidth": number | null;
        attributeChangedCallback: ((name: string, oldValue: string | null, newValue: string | null) => void) & (() => void);
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & ((type: keyof SVGElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        removeEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild: (<T extends Node>(node: T) => T) & (<T extends Node>(node: T) => T);
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#26@#main": SVGStopElement | SVGLinearGradientElement | SVGSVGElement | SVGRadialGradientElement | SVGGElement | SVGSymbolElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGTextElement | SVGTitleElement | SVGAnimateElement | SVGStyleElement | SVGAElement | SVGAnimateMotionElement | SVGAnimateTransformElement | SVGCircleElement | SVGClipPathElement | SVGDefsElement | SVGDescElement | SVGFEBlendElement | SVGFEColorMatrixElement | SVGFEComponentTransferElement | SVGFECompositeElement | SVGFEConvolveMatrixElement | SVGFEDiffuseLightingElement | SVGFEDisplacementMapElement | SVGFEDistantLightElement | SVGFEDropShadowElement | SVGFEFloodElement | SVGFEFuncAElement | SVGFEFuncBElement | SVGFEFuncGElement | SVGFEFuncRElement | SVGFEGaussianBlurElement | SVGFEImageElement | SVGFEMergeElement | SVGFEMergeNodeElement | SVGFEMorphologyElement | SVGFEOffsetElement | SVGFEPointLightElement | SVGFESpecularLightingElement | SVGFESpotLightElement | SVGFETileElement | SVGFETurbulenceElement | SVGFilterElement | SVGForeignObjectElement | SVGMarkerElement | SVGMaskElement | SVGMetadataElement | SVGMPathElement | SVGPathElement | SVGPatternElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGScriptElement | SVGSetElement | SVGSwitchElement | SVGTextPathElement | SVGTSpanElement | SVGUseElement | SVGViewElement;
        "__#26@#group": SVGGElement | null;
        "__#26@#attachMain"(): void;
        "__#26@#createGroup"(): SVGGElement;
        readonly group: SVGGElement | null;
        readonly mainElement: SVGElementTagNameMap[T];
        _setStyleAttribute(attributeName: string, value: string): void;
        readonly svgContainer: SVGSVGElement | null;
        readonly svgContainerController: import("./svgSVG").SVGSVGController | null;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        connectedCallback(): void;
        fill: import("../../classes/gradient").DrawStyle | null;
        "__#31@#fillGradient"(gradient: import("../../classes/gradient").Gradient): void;
        readonly _styleAttributes: {
            connectedCallback?: string | undefined;
            fill?: import("../../classes/gradient").DrawStyle | null;
            readonly _styleAttributes?: string | undefined;
            attributeChangedCallback?: string | undefined;
            createChild?: string | undefined;
            registerChange?: string | undefined;
            accessKey?: string | undefined;
            readonly accessKeyLabel?: string | undefined;
            autocapitalize?: string | undefined;
            dir?: string | undefined;
            draggable?: string | undefined;
            hidden?: string | undefined;
            inert?: string | undefined;
            innerText?: string | undefined;
            lang?: string | undefined;
            readonly offsetHeight?: string | undefined;
            readonly offsetLeft?: string | undefined;
            readonly offsetParent?: string | undefined;
            readonly offsetTop?: string | undefined;
            readonly offsetWidth?: string | undefined;
            outerText?: string | undefined;
            popover?: string | undefined;
            spellcheck?: string | undefined;
            title?: string | undefined;
            translate?: string | undefined;
            writingSuggestions?: string | undefined;
            attachInternals?: string | undefined;
            click?: string | undefined;
            hidePopover?: string | undefined;
            showPopover?: string | undefined;
            togglePopover?: string | undefined;
            addEventListener?: string | undefined;
            removeEventListener?: string | undefined;
            readonly attributes?: string | undefined;
            readonly classList?: string | undefined;
            className?: string | undefined;
            readonly clientHeight?: string | undefined;
            readonly clientLeft?: string | undefined;
            readonly clientTop?: string | undefined;
            readonly clientWidth?: string | undefined;
            readonly currentCSSZoom?: string | undefined;
            id?: string | undefined;
            innerHTML?: string | undefined;
            readonly localName?: string | undefined;
            readonly namespaceURI?: string | undefined;
            onfullscreenchange?: string | undefined;
            onfullscreenerror?: string | undefined;
            outerHTML?: string | undefined;
            readonly ownerDocument?: string | undefined;
            readonly part?: string | undefined;
            readonly prefix?: string | undefined;
            readonly scrollHeight?: string | undefined;
            scrollLeft?: string | undefined;
            scrollTop?: string | undefined;
            readonly scrollWidth?: string | undefined;
            readonly shadowRoot?: string | undefined;
            slot?: string | undefined;
            readonly tagName?: string | undefined;
            attachShadow?: string | undefined;
            checkVisibility?: string | undefined;
            closest?: string | undefined;
            computedStyleMap?: string | undefined;
            getAttribute?: string | undefined;
            getAttributeNS?: string | undefined;
            getAttributeNames?: string | undefined;
            getAttributeNode?: string | undefined;
            getAttributeNodeNS?: string | undefined;
            getBoundingClientRect?: string | undefined;
            getClientRects?: string | undefined;
            getElementsByClassName?: string | undefined;
            getElementsByTagName?: string | undefined;
            getElementsByTagNameNS?: string | undefined;
            getHTML?: string | undefined;
            hasAttribute?: string | undefined;
            hasAttributeNS?: string | undefined;
            hasAttributes?: string | undefined;
            hasPointerCapture?: string | undefined;
            insertAdjacentElement?: string | undefined;
            insertAdjacentHTML?: string | undefined;
            insertAdjacentText?: string | undefined;
            matches?: string | undefined;
            releasePointerCapture?: string | undefined;
            removeAttribute?: string | undefined;
            removeAttributeNS?: string | undefined;
            removeAttributeNode?: string | undefined;
            requestFullscreen?: string | undefined;
            requestPointerLock?: string | undefined;
            scroll?: string | undefined;
            scrollBy?: string | undefined;
            scrollIntoView?: string | undefined;
            scrollTo?: string | undefined;
            setAttribute?: string | undefined;
            setAttributeNS?: string | undefined;
            setAttributeNode?: string | undefined;
            setAttributeNodeNS?: string | undefined;
            setHTMLUnsafe?: string | undefined;
            setPointerCapture?: string | undefined;
            toggleAttribute?: string | undefined;
            webkitMatchesSelector?: string | undefined;
            readonly baseURI?: string | undefined;
            readonly childNodes?: string | undefined;
            readonly firstChild?: string | undefined;
            readonly isConnected?: string | undefined;
            readonly lastChild?: string | undefined;
            readonly nextSibling?: string | undefined;
            readonly nodeName?: string | undefined;
            readonly nodeType?: string | undefined;
            nodeValue?: string | undefined;
            readonly parentElement?: string | undefined;
            readonly parentNode?: string | undefined;
            readonly previousSibling?: string | undefined;
            textContent?: string | undefined;
            appendChild?: string | undefined;
            cloneNode?: string | undefined;
            compareDocumentPosition?: string | undefined;
            contains?: string | undefined;
            getRootNode?: string | undefined;
            hasChildNodes?: string | undefined;
            insertBefore?: string | undefined;
            isDefaultNamespace?: string | undefined;
            isEqualNode?: string | undefined;
            isSameNode?: string | undefined;
            lookupNamespaceURI?: string | undefined;
            lookupPrefix?: string | undefined;
            normalize?: string | undefined;
            removeChild?: string | undefined;
            replaceChild?: string | undefined;
            readonly ELEMENT_NODE?: string | undefined;
            readonly ATTRIBUTE_NODE?: string | undefined;
            readonly TEXT_NODE?: string | undefined;
            readonly CDATA_SECTION_NODE?: string | undefined;
            readonly ENTITY_REFERENCE_NODE?: string | undefined;
            readonly ENTITY_NODE?: string | undefined;
            readonly PROCESSING_INSTRUCTION_NODE?: string | undefined;
            readonly COMMENT_NODE?: string | undefined;
            readonly DOCUMENT_NODE?: string | undefined;
            readonly DOCUMENT_TYPE_NODE?: string | undefined;
            readonly DOCUMENT_FRAGMENT_NODE?: string | undefined;
            readonly NOTATION_NODE?: string | undefined;
            readonly DOCUMENT_POSITION_DISCONNECTED?: string | undefined;
            readonly DOCUMENT_POSITION_PRECEDING?: string | undefined;
            readonly DOCUMENT_POSITION_FOLLOWING?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINS?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINED_BY?: string | undefined;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: string | undefined;
            dispatchEvent?: string | undefined;
            ariaAtomic?: string | undefined;
            ariaAutoComplete?: string | undefined;
            ariaBrailleLabel?: string | undefined;
            ariaBrailleRoleDescription?: string | undefined;
            ariaBusy?: string | undefined;
            ariaChecked?: string | undefined;
            ariaColCount?: string | undefined;
            ariaColIndex?: string | undefined;
            ariaColIndexText?: string | undefined;
            ariaColSpan?: string | undefined;
            ariaCurrent?: string | undefined;
            ariaDescription?: string | undefined;
            ariaDisabled?: string | undefined;
            ariaExpanded?: string | undefined;
            ariaHasPopup?: string | undefined;
            ariaHidden?: string | undefined;
            ariaInvalid?: string | undefined;
            ariaKeyShortcuts?: string | undefined;
            ariaLabel?: string | undefined;
            ariaLevel?: string | undefined;
            ariaLive?: string | undefined;
            ariaModal?: string | undefined;
            ariaMultiLine?: string | undefined;
            ariaMultiSelectable?: string | undefined;
            ariaOrientation?: string | undefined;
            ariaPlaceholder?: string | undefined;
            ariaPosInSet?: string | undefined;
            ariaPressed?: string | undefined;
            ariaReadOnly?: string | undefined;
            ariaRequired?: string | undefined;
            ariaRoleDescription?: string | undefined;
            ariaRowCount?: string | undefined;
            ariaRowIndex?: string | undefined;
            ariaRowIndexText?: string | undefined;
            ariaRowSpan?: string | undefined;
            ariaSelected?: string | undefined;
            ariaSetSize?: string | undefined;
            ariaSort?: string | undefined;
            ariaValueMax?: string | undefined;
            ariaValueMin?: string | undefined;
            ariaValueNow?: string | undefined;
            ariaValueText?: string | undefined;
            role?: string | undefined;
            animate?: string | undefined;
            getAnimations?: string | undefined;
            after?: string | undefined;
            before?: string | undefined;
            remove?: string | undefined;
            replaceWith?: string | undefined;
            readonly nextElementSibling?: string | undefined;
            readonly previousElementSibling?: string | undefined;
            readonly childElementCount?: string | undefined;
            readonly children?: string | undefined;
            readonly firstElementChild?: string | undefined;
            readonly lastElementChild?: string | undefined;
            append?: string | undefined;
            prepend?: string | undefined;
            querySelector?: string | undefined;
            querySelectorAll?: string | undefined;
            replaceChildren?: string | undefined;
            readonly assignedSlot?: string | undefined;
            readonly attributeStyleMap?: string | undefined;
            readonly style?: string | undefined;
            contentEditable?: string | undefined;
            enterKeyHint?: string | undefined;
            inputMode?: string | undefined;
            readonly isContentEditable?: string | undefined;
            onabort?: string | undefined;
            onanimationcancel?: string | undefined;
            onanimationend?: string | undefined;
            onanimationiteration?: string | undefined;
            onanimationstart?: string | undefined;
            onauxclick?: string | undefined;
            onbeforeinput?: string | undefined;
            onbeforetoggle?: string | undefined;
            onblur?: string | undefined;
            oncancel?: string | undefined;
            oncanplay?: string | undefined;
            oncanplaythrough?: string | undefined;
            onchange?: string | undefined;
            onclick?: string | undefined;
            onclose?: string | undefined;
            oncontextlost?: string | undefined;
            oncontextmenu?: string | undefined;
            oncontextrestored?: string | undefined;
            oncopy?: string | undefined;
            oncuechange?: string | undefined;
            oncut?: string | undefined;
            ondblclick?: string | undefined;
            ondrag?: string | undefined;
            ondragend?: string | undefined;
            ondragenter?: string | undefined;
            ondragleave?: string | undefined;
            ondragover?: string | undefined;
            ondragstart?: string | undefined;
            ondrop?: string | undefined;
            ondurationchange?: string | undefined;
            onemptied?: string | undefined;
            onended?: string | undefined;
            onerror?: string | undefined;
            onfocus?: string | undefined;
            onformdata?: string | undefined;
            ongotpointercapture?: string | undefined;
            oninput?: string | undefined;
            oninvalid?: string | undefined;
            onkeydown?: string | undefined;
            onkeypress?: string | undefined;
            onkeyup?: string | undefined;
            onload?: string | undefined;
            onloadeddata?: string | undefined;
            onloadedmetadata?: string | undefined;
            onloadstart?: string | undefined;
            onlostpointercapture?: string | undefined;
            onmousedown?: string | undefined;
            onmouseenter?: string | undefined;
            onmouseleave?: string | undefined;
            onmousemove?: string | undefined;
            onmouseout?: string | undefined;
            onmouseover?: string | undefined;
            onmouseup?: string | undefined;
            onpaste?: string | undefined;
            onpause?: string | undefined;
            onplay?: string | undefined;
            onplaying?: string | undefined;
            onpointercancel?: string | undefined;
            onpointerdown?: string | undefined;
            onpointerenter?: string | undefined;
            onpointerleave?: string | undefined;
            onpointermove?: string | undefined;
            onpointerout?: string | undefined;
            onpointerover?: string | undefined;
            onpointerup?: string | undefined;
            onprogress?: string | undefined;
            onratechange?: string | undefined;
            onreset?: string | undefined;
            onresize?: string | undefined;
            onscroll?: string | undefined;
            onscrollend?: string | undefined;
            onsecuritypolicyviolation?: string | undefined;
            onseeked?: string | undefined;
            onseeking?: string | undefined;
            onselect?: string | undefined;
            onselectionchange?: string | undefined;
            onselectstart?: string | undefined;
            onslotchange?: string | undefined;
            onstalled?: string | undefined;
            onsubmit?: string | undefined;
            onsuspend?: string | undefined;
            ontimeupdate?: string | undefined;
            ontoggle?: string | undefined;
            ontouchcancel?: string | undefined;
            ontouchend?: string | undefined;
            ontouchmove?: string | undefined;
            ontouchstart?: string | undefined;
            ontransitioncancel?: string | undefined;
            ontransitionend?: string | undefined;
            ontransitionrun?: string | undefined;
            ontransitionstart?: string | undefined;
            onvolumechange?: string | undefined;
            onwaiting?: string | undefined;
            onwebkitanimationend?: string | undefined;
            onwebkitanimationiteration?: string | undefined;
            onwebkitanimationstart?: string | undefined;
            onwebkittransitionend?: string | undefined;
            onwheel?: string | undefined;
            autofocus?: string | undefined;
            readonly dataset?: string | undefined;
            nonce?: string | undefined;
            tabIndex?: string | undefined;
            blur?: string | undefined;
            focus?: string | undefined;
            readonly group?: SVGGElement | null;
            readonly mainElement?: SVGElementTagNameMap[T];
            _setStyleAttribute?: string | undefined;
            readonly svgContainer?: SVGSVGElement | null;
            readonly svgContainerController?: import("./svgSVG").SVGSVGController | null;
        };
        "__#30@#fill": import("../../classes/gradient").DrawStyle | null;
        attributeChangedCallback: ((name: string, oldValue: string | null, newValue: string | null) => void) & (() => void);
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & ((type: keyof SVGElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        removeEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild: (<T extends Node>(node: T) => T) & (<T extends Node>(node: T) => T);
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#26@#main": SVGStopElement | SVGLinearGradientElement | SVGSVGElement | SVGRadialGradientElement | SVGGElement | SVGSymbolElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGTextElement | SVGTitleElement | SVGAnimateElement | SVGStyleElement | SVGAElement | SVGAnimateMotionElement | SVGAnimateTransformElement | SVGCircleElement | SVGClipPathElement | SVGDefsElement | SVGDescElement | SVGFEBlendElement | SVGFEColorMatrixElement | SVGFEComponentTransferElement | SVGFECompositeElement | SVGFEConvolveMatrixElement | SVGFEDiffuseLightingElement | SVGFEDisplacementMapElement | SVGFEDistantLightElement | SVGFEDropShadowElement | SVGFEFloodElement | SVGFEFuncAElement | SVGFEFuncBElement | SVGFEFuncGElement | SVGFEFuncRElement | SVGFEGaussianBlurElement | SVGFEImageElement | SVGFEMergeElement | SVGFEMergeNodeElement | SVGFEMorphologyElement | SVGFEOffsetElement | SVGFEPointLightElement | SVGFESpecularLightingElement | SVGFESpotLightElement | SVGFETileElement | SVGFETurbulenceElement | SVGFilterElement | SVGForeignObjectElement | SVGMarkerElement | SVGMaskElement | SVGMetadataElement | SVGMPathElement | SVGPathElement | SVGPatternElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGScriptElement | SVGSetElement | SVGSwitchElement | SVGTextPathElement | SVGTSpanElement | SVGUseElement | SVGViewElement;
        "__#26@#group": SVGGElement | null;
        "__#26@#attachMain"(): void;
        "__#26@#createGroup"(): SVGGElement;
        readonly group: SVGGElement | null;
        readonly mainElement: SVGElementTagNameMap[T];
        _setStyleAttribute(attributeName: string, value: string): void;
        readonly svgContainer: SVGSVGElement | null;
        readonly svgContainerController: import("./svgSVG").SVGSVGController | null;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        connectedCallback(): void;
        height: number;
        width: number;
        "__#26@#main": SVGStopElement | SVGLinearGradientElement | SVGSVGElement | SVGRadialGradientElement | SVGGElement | SVGSymbolElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGTextElement | SVGTitleElement | SVGAnimateElement | SVGStyleElement | SVGAElement | SVGAnimateMotionElement | SVGAnimateTransformElement | SVGCircleElement | SVGClipPathElement | SVGDefsElement | SVGDescElement | SVGFEBlendElement | SVGFEColorMatrixElement | SVGFEComponentTransferElement | SVGFECompositeElement | SVGFEConvolveMatrixElement | SVGFEDiffuseLightingElement | SVGFEDisplacementMapElement | SVGFEDistantLightElement | SVGFEDropShadowElement | SVGFEFloodElement | SVGFEFuncAElement | SVGFEFuncBElement | SVGFEFuncGElement | SVGFEFuncRElement | SVGFEGaussianBlurElement | SVGFEImageElement | SVGFEMergeElement | SVGFEMergeNodeElement | SVGFEMorphologyElement | SVGFEOffsetElement | SVGFEPointLightElement | SVGFESpecularLightingElement | SVGFESpotLightElement | SVGFETileElement | SVGFETurbulenceElement | SVGFilterElement | SVGForeignObjectElement | SVGMarkerElement | SVGMaskElement | SVGMetadataElement | SVGMPathElement | SVGPathElement | SVGPatternElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGScriptElement | SVGSetElement | SVGSwitchElement | SVGTextPathElement | SVGTSpanElement | SVGUseElement | SVGViewElement;
        "__#26@#group": SVGGElement | null;
        addEventListener: ((type: keyof SVGElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void) & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        };
        removeEventListener: ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void) & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        };
        appendChild: (<T extends Node>(node: T) => T) & (<T extends Node>(node: T) => T);
        attributeChangedCallback: (() => void) & ((name: string, oldValue: string | null, newValue: string | null) => void) & ((name: string, oldValue: string | null, newValue: string | null) => void);
        "__#26@#attachMain"(): void;
        "__#26@#createGroup"(): SVGGElement;
        readonly group: SVGGElement | null;
        readonly mainElement: SVGElementTagNameMap[T];
        _setStyleAttribute(attributeName: string, value: string): void;
        readonly _styleAttributes: {
            connectedCallback?: string | undefined;
            height?: number;
            width?: number;
            addEventListener?: string | undefined;
            removeEventListener?: string | undefined;
            appendChild?: string | undefined;
            attributeChangedCallback?: string | undefined;
            readonly group?: SVGGElement | null;
            readonly mainElement?: SVGElementTagNameMap[T];
            _setStyleAttribute?: string | undefined;
            readonly _styleAttributes?: { [Key in keyof this]?: string; };
            readonly svgContainer?: SVGSVGElement | null;
            readonly svgContainerController?: import("./svgSVG").SVGSVGController | null;
            createChild?: string | undefined;
            registerChange?: string | undefined;
            accessKey?: string | undefined;
            readonly accessKeyLabel?: string | undefined;
            autocapitalize?: string | undefined;
            dir?: string | undefined;
            draggable?: string | undefined;
            hidden?: string | undefined;
            inert?: string | undefined;
            innerText?: string | undefined;
            lang?: string | undefined;
            readonly offsetHeight?: string | undefined;
            readonly offsetLeft?: string | undefined;
            readonly offsetParent?: string | undefined;
            readonly offsetTop?: string | undefined;
            readonly offsetWidth?: string | undefined;
            outerText?: string | undefined;
            popover?: string | undefined;
            spellcheck?: string | undefined;
            title?: string | undefined;
            translate?: string | undefined;
            writingSuggestions?: string | undefined;
            attachInternals?: string | undefined;
            click?: string | undefined;
            hidePopover?: string | undefined;
            showPopover?: string | undefined;
            togglePopover?: string | undefined;
            readonly attributes?: string | undefined;
            readonly classList?: string | undefined;
            className?: string | undefined;
            readonly clientHeight?: string | undefined;
            readonly clientLeft?: string | undefined;
            readonly clientTop?: string | undefined;
            readonly clientWidth?: string | undefined;
            readonly currentCSSZoom?: string | undefined;
            id?: string | undefined;
            innerHTML?: string | undefined;
            readonly localName?: string | undefined;
            readonly namespaceURI?: string | undefined;
            onfullscreenchange?: string | undefined;
            onfullscreenerror?: string | undefined;
            outerHTML?: string | undefined;
            readonly ownerDocument?: string | undefined;
            readonly part?: string | undefined;
            readonly prefix?: string | undefined;
            readonly scrollHeight?: string | undefined;
            scrollLeft?: string | undefined;
            scrollTop?: string | undefined;
            readonly scrollWidth?: string | undefined;
            readonly shadowRoot?: string | undefined;
            slot?: string | undefined;
            readonly tagName?: string | undefined;
            attachShadow?: string | undefined;
            checkVisibility?: string | undefined;
            closest?: string | undefined;
            computedStyleMap?: string | undefined;
            getAttribute?: string | undefined;
            getAttributeNS?: string | undefined;
            getAttributeNames?: string | undefined;
            getAttributeNode?: string | undefined;
            getAttributeNodeNS?: string | undefined;
            getBoundingClientRect?: string | undefined;
            getClientRects?: string | undefined;
            getElementsByClassName?: string | undefined;
            getElementsByTagName?: string | undefined;
            getElementsByTagNameNS?: string | undefined;
            getHTML?: string | undefined;
            hasAttribute?: string | undefined;
            hasAttributeNS?: string | undefined;
            hasAttributes?: string | undefined;
            hasPointerCapture?: string | undefined;
            insertAdjacentElement?: string | undefined;
            insertAdjacentHTML?: string | undefined;
            insertAdjacentText?: string | undefined;
            matches?: string | undefined;
            releasePointerCapture?: string | undefined;
            removeAttribute?: string | undefined;
            removeAttributeNS?: string | undefined;
            removeAttributeNode?: string | undefined;
            requestFullscreen?: string | undefined;
            requestPointerLock?: string | undefined;
            scroll?: string | undefined;
            scrollBy?: string | undefined;
            scrollIntoView?: string | undefined;
            scrollTo?: string | undefined;
            setAttribute?: string | undefined;
            setAttributeNS?: string | undefined;
            setAttributeNode?: string | undefined;
            setAttributeNodeNS?: string | undefined;
            setHTMLUnsafe?: string | undefined;
            setPointerCapture?: string | undefined;
            toggleAttribute?: string | undefined;
            webkitMatchesSelector?: string | undefined;
            readonly baseURI?: string | undefined;
            readonly childNodes?: string | undefined;
            readonly firstChild?: string | undefined;
            readonly isConnected?: string | undefined;
            readonly lastChild?: string | undefined;
            readonly nextSibling?: string | undefined;
            readonly nodeName?: string | undefined;
            readonly nodeType?: string | undefined;
            nodeValue?: string | undefined;
            readonly parentElement?: string | undefined;
            readonly parentNode?: string | undefined;
            readonly previousSibling?: string | undefined;
            textContent?: string | undefined;
            cloneNode?: string | undefined;
            compareDocumentPosition?: string | undefined;
            contains?: string | undefined;
            getRootNode?: string | undefined;
            hasChildNodes?: string | undefined;
            insertBefore?: string | undefined;
            isDefaultNamespace?: string | undefined;
            isEqualNode?: string | undefined;
            isSameNode?: string | undefined;
            lookupNamespaceURI?: string | undefined;
            lookupPrefix?: string | undefined;
            normalize?: string | undefined;
            removeChild?: string | undefined;
            replaceChild?: string | undefined;
            readonly ELEMENT_NODE?: string | undefined;
            readonly ATTRIBUTE_NODE?: string | undefined;
            readonly TEXT_NODE?: string | undefined;
            readonly CDATA_SECTION_NODE?: string | undefined;
            readonly ENTITY_REFERENCE_NODE?: string | undefined;
            readonly ENTITY_NODE?: string | undefined;
            readonly PROCESSING_INSTRUCTION_NODE?: string | undefined;
            readonly COMMENT_NODE?: string | undefined;
            readonly DOCUMENT_NODE?: string | undefined;
            readonly DOCUMENT_TYPE_NODE?: string | undefined;
            readonly DOCUMENT_FRAGMENT_NODE?: string | undefined;
            readonly NOTATION_NODE?: string | undefined;
            readonly DOCUMENT_POSITION_DISCONNECTED?: string | undefined;
            readonly DOCUMENT_POSITION_PRECEDING?: string | undefined;
            readonly DOCUMENT_POSITION_FOLLOWING?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINS?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINED_BY?: string | undefined;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: string | undefined;
            dispatchEvent?: string | undefined;
            ariaAtomic?: string | undefined;
            ariaAutoComplete?: string | undefined;
            ariaBrailleLabel?: string | undefined;
            ariaBrailleRoleDescription?: string | undefined;
            ariaBusy?: string | undefined;
            ariaChecked?: string | undefined;
            ariaColCount?: string | undefined;
            ariaColIndex?: string | undefined;
            ariaColIndexText?: string | undefined;
            ariaColSpan?: string | undefined;
            ariaCurrent?: string | undefined;
            ariaDescription?: string | undefined;
            ariaDisabled?: string | undefined;
            ariaExpanded?: string | undefined;
            ariaHasPopup?: string | undefined;
            ariaHidden?: string | undefined;
            ariaInvalid?: string | undefined;
            ariaKeyShortcuts?: string | undefined;
            ariaLabel?: string | undefined;
            ariaLevel?: string | undefined;
            ariaLive?: string | undefined;
            ariaModal?: string | undefined;
            ariaMultiLine?: string | undefined;
            ariaMultiSelectable?: string | undefined;
            ariaOrientation?: string | undefined;
            ariaPlaceholder?: string | undefined;
            ariaPosInSet?: string | undefined;
            ariaPressed?: string | undefined;
            ariaReadOnly?: string | undefined;
            ariaRequired?: string | undefined;
            ariaRoleDescription?: string | undefined;
            ariaRowCount?: string | undefined;
            ariaRowIndex?: string | undefined;
            ariaRowIndexText?: string | undefined;
            ariaRowSpan?: string | undefined;
            ariaSelected?: string | undefined;
            ariaSetSize?: string | undefined;
            ariaSort?: string | undefined;
            ariaValueMax?: string | undefined;
            ariaValueMin?: string | undefined;
            ariaValueNow?: string | undefined;
            ariaValueText?: string | undefined;
            role?: string | undefined;
            animate?: string | undefined;
            getAnimations?: string | undefined;
            after?: string | undefined;
            before?: string | undefined;
            remove?: string | undefined;
            replaceWith?: string | undefined;
            readonly nextElementSibling?: string | undefined;
            readonly previousElementSibling?: string | undefined;
            readonly childElementCount?: string | undefined;
            readonly children?: string | undefined;
            readonly firstElementChild?: string | undefined;
            readonly lastElementChild?: string | undefined;
            append?: string | undefined;
            prepend?: string | undefined;
            querySelector?: string | undefined;
            querySelectorAll?: string | undefined;
            replaceChildren?: string | undefined;
            readonly assignedSlot?: string | undefined;
            readonly attributeStyleMap?: string | undefined;
            readonly style?: string | undefined;
            contentEditable?: string | undefined;
            enterKeyHint?: string | undefined;
            inputMode?: string | undefined;
            readonly isContentEditable?: string | undefined;
            onabort?: string | undefined;
            onanimationcancel?: string | undefined;
            onanimationend?: string | undefined;
            onanimationiteration?: string | undefined;
            onanimationstart?: string | undefined;
            onauxclick?: string | undefined;
            onbeforeinput?: string | undefined;
            onbeforetoggle?: string | undefined;
            onblur?: string | undefined;
            oncancel?: string | undefined;
            oncanplay?: string | undefined;
            oncanplaythrough?: string | undefined;
            onchange?: string | undefined;
            onclick?: string | undefined;
            onclose?: string | undefined;
            oncontextlost?: string | undefined;
            oncontextmenu?: string | undefined;
            oncontextrestored?: string | undefined;
            oncopy?: string | undefined;
            oncuechange?: string | undefined;
            oncut?: string | undefined;
            ondblclick?: string | undefined;
            ondrag?: string | undefined;
            ondragend?: string | undefined;
            ondragenter?: string | undefined;
            ondragleave?: string | undefined;
            ondragover?: string | undefined;
            ondragstart?: string | undefined;
            ondrop?: string | undefined;
            ondurationchange?: string | undefined;
            onemptied?: string | undefined;
            onended?: string | undefined;
            onerror?: string | undefined;
            onfocus?: string | undefined;
            onformdata?: string | undefined;
            ongotpointercapture?: string | undefined;
            oninput?: string | undefined;
            oninvalid?: string | undefined;
            onkeydown?: string | undefined;
            onkeypress?: string | undefined;
            onkeyup?: string | undefined;
            onload?: string | undefined;
            onloadeddata?: string | undefined;
            onloadedmetadata?: string | undefined;
            onloadstart?: string | undefined;
            onlostpointercapture?: string | undefined;
            onmousedown?: string | undefined;
            onmouseenter?: string | undefined;
            onmouseleave?: string | undefined;
            onmousemove?: string | undefined;
            onmouseout?: string | undefined;
            onmouseover?: string | undefined;
            onmouseup?: string | undefined;
            onpaste?: string | undefined;
            onpause?: string | undefined;
            onplay?: string | undefined;
            onplaying?: string | undefined;
            onpointercancel?: string | undefined;
            onpointerdown?: string | undefined;
            onpointerenter?: string | undefined;
            onpointerleave?: string | undefined;
            onpointermove?: string | undefined;
            onpointerout?: string | undefined;
            onpointerover?: string | undefined;
            onpointerup?: string | undefined;
            onprogress?: string | undefined;
            onratechange?: string | undefined;
            onreset?: string | undefined;
            onresize?: string | undefined;
            onscroll?: string | undefined;
            onscrollend?: string | undefined;
            onsecuritypolicyviolation?: string | undefined;
            onseeked?: string | undefined;
            onseeking?: string | undefined;
            onselect?: string | undefined;
            onselectionchange?: string | undefined;
            onselectstart?: string | undefined;
            onslotchange?: string | undefined;
            onstalled?: string | undefined;
            onsubmit?: string | undefined;
            onsuspend?: string | undefined;
            ontimeupdate?: string | undefined;
            ontoggle?: string | undefined;
            ontouchcancel?: string | undefined;
            ontouchend?: string | undefined;
            ontouchmove?: string | undefined;
            ontouchstart?: string | undefined;
            ontransitioncancel?: string | undefined;
            ontransitionend?: string | undefined;
            ontransitionrun?: string | undefined;
            ontransitionstart?: string | undefined;
            onvolumechange?: string | undefined;
            onwaiting?: string | undefined;
            onwebkitanimationend?: string | undefined;
            onwebkitanimationiteration?: string | undefined;
            onwebkitanimationstart?: string | undefined;
            onwebkittransitionend?: string | undefined;
            onwheel?: string | undefined;
            autofocus?: string | undefined;
            readonly dataset?: string | undefined;
            nonce?: string | undefined;
            tabIndex?: string | undefined;
            blur?: string | undefined;
            focus?: string | undefined;
        };
        readonly svgContainer: SVGSVGElement | null;
        readonly svgContainerController: import("./svgSVG").SVGSVGController | null;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#18@#width": number;
        "__#18@#height": number;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        "__#18@#width": number;
        "__#18@#height": number;
        width: number;
        height: number;
        attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        anchor: import("../..").Vector2D;
        "__#23@#angleChangeListener": () => void;
        angle: import("../..").Angle;
        connectedCallback(): void;
        "__#23@#updateTransformAttribute"(): void;
        "__#22@#anchor": import("../..").Vector2D;
        "__#22@#angle": import("../..").Angle;
        "__#22@#angularVelocity": import("../..").Angle;
        "__#22@#scale": import("../..").Vector2D;
        "__#22@#velocity": import("../..").Vector2D;
        "__#22@#angleChangeListener": ChangeListener<number>;
        "__#22@#angularVelocityChangedTime": number;
        angularVelocity: import("../..").Angle;
        "__#22@#anchorChangeListener": ChangeListener<import("../../classes/vector2d").Vector2DBase>;
        _applyMovement(deltaTime: number): void;
        attributeChangedCallback: ((name: string, oldValue: string | null, newValue: string | null) => void) & (() => void);
        moveAnchor(x: number, y: number): void;
        rotateClockwise(angle: import("../..").Angle): void;
        rotateCounterclockwise(angle: import("../..").Angle): void;
        get scale(): import("../..").Vector2D;
        set scale(value: import("../..").Vector2D | number);
        "__#22@#velocityChangedTime": number;
        velocity: import("../..").Vector2D;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & ((type: keyof SVGElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        removeEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild: (<T extends Node>(node: T) => T) & (<T extends Node>(node: T) => T);
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#26@#main": SVGStopElement | SVGLinearGradientElement | SVGSVGElement | SVGRadialGradientElement | SVGGElement | SVGSymbolElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGTextElement | SVGTitleElement | SVGAnimateElement | SVGStyleElement | SVGAElement | SVGAnimateMotionElement | SVGAnimateTransformElement | SVGCircleElement | SVGClipPathElement | SVGDefsElement | SVGDescElement | SVGFEBlendElement | SVGFEColorMatrixElement | SVGFEComponentTransferElement | SVGFECompositeElement | SVGFEConvolveMatrixElement | SVGFEDiffuseLightingElement | SVGFEDisplacementMapElement | SVGFEDistantLightElement | SVGFEDropShadowElement | SVGFEFloodElement | SVGFEFuncAElement | SVGFEFuncBElement | SVGFEFuncGElement | SVGFEFuncRElement | SVGFEGaussianBlurElement | SVGFEImageElement | SVGFEMergeElement | SVGFEMergeNodeElement | SVGFEMorphologyElement | SVGFEOffsetElement | SVGFEPointLightElement | SVGFESpecularLightingElement | SVGFESpotLightElement | SVGFETileElement | SVGFETurbulenceElement | SVGFilterElement | SVGForeignObjectElement | SVGMarkerElement | SVGMaskElement | SVGMetadataElement | SVGMPathElement | SVGPathElement | SVGPatternElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGScriptElement | SVGSetElement | SVGSwitchElement | SVGTextPathElement | SVGTSpanElement | SVGUseElement | SVGViewElement;
        "__#26@#group": SVGGElement | null;
        "__#26@#attachMain"(): void;
        "__#26@#createGroup"(): SVGGElement;
        readonly group: SVGGElement | null;
        readonly mainElement: SVGElementTagNameMap[T];
        _setStyleAttribute(attributeName: string, value: string): void;
        readonly _styleAttributes: {
            anchor?: import("../..").Vector2D;
            angle?: import("../..").Angle;
            connectedCallback?: string | undefined;
            angularVelocity?: import("../..").Angle;
            _applyMovement?: string | undefined;
            attributeChangedCallback?: string | undefined;
            moveAnchor?: string | undefined;
            rotateClockwise?: string | undefined;
            rotateCounterclockwise?: string | undefined;
            scale?: import("../..").Vector2D;
            velocity?: import("../..").Vector2D;
            createChild?: string | undefined;
            registerChange?: string | undefined;
            accessKey?: string | undefined;
            readonly accessKeyLabel?: string | undefined;
            autocapitalize?: string | undefined;
            dir?: string | undefined;
            draggable?: string | undefined;
            hidden?: string | undefined;
            inert?: string | undefined;
            innerText?: string | undefined;
            lang?: string | undefined;
            readonly offsetHeight?: string | undefined;
            readonly offsetLeft?: string | undefined;
            readonly offsetParent?: string | undefined;
            readonly offsetTop?: string | undefined;
            readonly offsetWidth?: string | undefined;
            outerText?: string | undefined;
            popover?: string | undefined;
            spellcheck?: string | undefined;
            title?: string | undefined;
            translate?: string | undefined;
            writingSuggestions?: string | undefined;
            attachInternals?: string | undefined;
            click?: string | undefined;
            hidePopover?: string | undefined;
            showPopover?: string | undefined;
            togglePopover?: string | undefined;
            addEventListener?: string | undefined;
            removeEventListener?: string | undefined;
            readonly attributes?: string | undefined;
            readonly classList?: string | undefined;
            className?: string | undefined;
            readonly clientHeight?: string | undefined;
            readonly clientLeft?: string | undefined;
            readonly clientTop?: string | undefined;
            readonly clientWidth?: string | undefined;
            readonly currentCSSZoom?: string | undefined;
            id?: string | undefined;
            innerHTML?: string | undefined;
            readonly localName?: string | undefined;
            readonly namespaceURI?: string | undefined;
            onfullscreenchange?: string | undefined;
            onfullscreenerror?: string | undefined;
            outerHTML?: string | undefined;
            readonly ownerDocument?: string | undefined;
            readonly part?: string | undefined;
            readonly prefix?: string | undefined;
            readonly scrollHeight?: string | undefined;
            scrollLeft?: string | undefined;
            scrollTop?: string | undefined;
            readonly scrollWidth?: string | undefined;
            readonly shadowRoot?: string | undefined;
            slot?: string | undefined;
            readonly tagName?: string | undefined;
            attachShadow?: string | undefined;
            checkVisibility?: string | undefined;
            closest?: string | undefined;
            computedStyleMap?: string | undefined;
            getAttribute?: string | undefined;
            getAttributeNS?: string | undefined;
            getAttributeNames?: string | undefined;
            getAttributeNode?: string | undefined;
            getAttributeNodeNS?: string | undefined;
            getBoundingClientRect?: string | undefined;
            getClientRects?: string | undefined;
            getElementsByClassName?: string | undefined;
            getElementsByTagName?: string | undefined;
            getElementsByTagNameNS?: string | undefined;
            getHTML?: string | undefined;
            hasAttribute?: string | undefined;
            hasAttributeNS?: string | undefined;
            hasAttributes?: string | undefined;
            hasPointerCapture?: string | undefined;
            insertAdjacentElement?: string | undefined;
            insertAdjacentHTML?: string | undefined;
            insertAdjacentText?: string | undefined;
            matches?: string | undefined;
            releasePointerCapture?: string | undefined;
            removeAttribute?: string | undefined;
            removeAttributeNS?: string | undefined;
            removeAttributeNode?: string | undefined;
            requestFullscreen?: string | undefined;
            requestPointerLock?: string | undefined;
            scroll?: string | undefined;
            scrollBy?: string | undefined;
            scrollIntoView?: string | undefined;
            scrollTo?: string | undefined;
            setAttribute?: string | undefined;
            setAttributeNS?: string | undefined;
            setAttributeNode?: string | undefined;
            setAttributeNodeNS?: string | undefined;
            setHTMLUnsafe?: string | undefined;
            setPointerCapture?: string | undefined;
            toggleAttribute?: string | undefined;
            webkitMatchesSelector?: string | undefined;
            readonly baseURI?: string | undefined;
            readonly childNodes?: string | undefined;
            readonly firstChild?: string | undefined;
            readonly isConnected?: string | undefined;
            readonly lastChild?: string | undefined;
            readonly nextSibling?: string | undefined;
            readonly nodeName?: string | undefined;
            readonly nodeType?: string | undefined;
            nodeValue?: string | undefined;
            readonly parentElement?: string | undefined;
            readonly parentNode?: string | undefined;
            readonly previousSibling?: string | undefined;
            textContent?: string | undefined;
            appendChild?: string | undefined;
            cloneNode?: string | undefined;
            compareDocumentPosition?: string | undefined;
            contains?: string | undefined;
            getRootNode?: string | undefined;
            hasChildNodes?: string | undefined;
            insertBefore?: string | undefined;
            isDefaultNamespace?: string | undefined;
            isEqualNode?: string | undefined;
            isSameNode?: string | undefined;
            lookupNamespaceURI?: string | undefined;
            lookupPrefix?: string | undefined;
            normalize?: string | undefined;
            removeChild?: string | undefined;
            replaceChild?: string | undefined;
            readonly ELEMENT_NODE?: string | undefined;
            readonly ATTRIBUTE_NODE?: string | undefined;
            readonly TEXT_NODE?: string | undefined;
            readonly CDATA_SECTION_NODE?: string | undefined;
            readonly ENTITY_REFERENCE_NODE?: string | undefined;
            readonly ENTITY_NODE?: string | undefined;
            readonly PROCESSING_INSTRUCTION_NODE?: string | undefined;
            readonly COMMENT_NODE?: string | undefined;
            readonly DOCUMENT_NODE?: string | undefined;
            readonly DOCUMENT_TYPE_NODE?: string | undefined;
            readonly DOCUMENT_FRAGMENT_NODE?: string | undefined;
            readonly NOTATION_NODE?: string | undefined;
            readonly DOCUMENT_POSITION_DISCONNECTED?: string | undefined;
            readonly DOCUMENT_POSITION_PRECEDING?: string | undefined;
            readonly DOCUMENT_POSITION_FOLLOWING?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINS?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINED_BY?: string | undefined;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: string | undefined;
            dispatchEvent?: string | undefined;
            ariaAtomic?: string | undefined;
            ariaAutoComplete?: string | undefined;
            ariaBrailleLabel?: string | undefined;
            ariaBrailleRoleDescription?: string | undefined;
            ariaBusy?: string | undefined;
            ariaChecked?: string | undefined;
            ariaColCount?: string | undefined;
            ariaColIndex?: string | undefined;
            ariaColIndexText?: string | undefined;
            ariaColSpan?: string | undefined;
            ariaCurrent?: string | undefined;
            ariaDescription?: string | undefined;
            ariaDisabled?: string | undefined;
            ariaExpanded?: string | undefined;
            ariaHasPopup?: string | undefined;
            ariaHidden?: string | undefined;
            ariaInvalid?: string | undefined;
            ariaKeyShortcuts?: string | undefined;
            ariaLabel?: string | undefined;
            ariaLevel?: string | undefined;
            ariaLive?: string | undefined;
            ariaModal?: string | undefined;
            ariaMultiLine?: string | undefined;
            ariaMultiSelectable?: string | undefined;
            ariaOrientation?: string | undefined;
            ariaPlaceholder?: string | undefined;
            ariaPosInSet?: string | undefined;
            ariaPressed?: string | undefined;
            ariaReadOnly?: string | undefined;
            ariaRequired?: string | undefined;
            ariaRoleDescription?: string | undefined;
            ariaRowCount?: string | undefined;
            ariaRowIndex?: string | undefined;
            ariaRowIndexText?: string | undefined;
            ariaRowSpan?: string | undefined;
            ariaSelected?: string | undefined;
            ariaSetSize?: string | undefined;
            ariaSort?: string | undefined;
            ariaValueMax?: string | undefined;
            ariaValueMin?: string | undefined;
            ariaValueNow?: string | undefined;
            ariaValueText?: string | undefined;
            role?: string | undefined;
            animate?: string | undefined;
            getAnimations?: string | undefined;
            after?: string | undefined;
            before?: string | undefined;
            remove?: string | undefined;
            replaceWith?: string | undefined;
            readonly nextElementSibling?: string | undefined;
            readonly previousElementSibling?: string | undefined;
            readonly childElementCount?: string | undefined;
            readonly children?: string | undefined;
            readonly firstElementChild?: string | undefined;
            readonly lastElementChild?: string | undefined;
            append?: string | undefined;
            prepend?: string | undefined;
            querySelector?: string | undefined;
            querySelectorAll?: string | undefined;
            replaceChildren?: string | undefined;
            readonly assignedSlot?: string | undefined;
            readonly attributeStyleMap?: string | undefined;
            readonly style?: string | undefined;
            contentEditable?: string | undefined;
            enterKeyHint?: string | undefined;
            inputMode?: string | undefined;
            readonly isContentEditable?: string | undefined;
            onabort?: string | undefined;
            onanimationcancel?: string | undefined;
            onanimationend?: string | undefined;
            onanimationiteration?: string | undefined;
            onanimationstart?: string | undefined;
            onauxclick?: string | undefined;
            onbeforeinput?: string | undefined;
            onbeforetoggle?: string | undefined;
            onblur?: string | undefined;
            oncancel?: string | undefined;
            oncanplay?: string | undefined;
            oncanplaythrough?: string | undefined;
            onchange?: string | undefined;
            onclick?: string | undefined;
            onclose?: string | undefined;
            oncontextlost?: string | undefined;
            oncontextmenu?: string | undefined;
            oncontextrestored?: string | undefined;
            oncopy?: string | undefined;
            oncuechange?: string | undefined;
            oncut?: string | undefined;
            ondblclick?: string | undefined;
            ondrag?: string | undefined;
            ondragend?: string | undefined;
            ondragenter?: string | undefined;
            ondragleave?: string | undefined;
            ondragover?: string | undefined;
            ondragstart?: string | undefined;
            ondrop?: string | undefined;
            ondurationchange?: string | undefined;
            onemptied?: string | undefined;
            onended?: string | undefined;
            onerror?: string | undefined;
            onfocus?: string | undefined;
            onformdata?: string | undefined;
            ongotpointercapture?: string | undefined;
            oninput?: string | undefined;
            oninvalid?: string | undefined;
            onkeydown?: string | undefined;
            onkeypress?: string | undefined;
            onkeyup?: string | undefined;
            onload?: string | undefined;
            onloadeddata?: string | undefined;
            onloadedmetadata?: string | undefined;
            onloadstart?: string | undefined;
            onlostpointercapture?: string | undefined;
            onmousedown?: string | undefined;
            onmouseenter?: string | undefined;
            onmouseleave?: string | undefined;
            onmousemove?: string | undefined;
            onmouseout?: string | undefined;
            onmouseover?: string | undefined;
            onmouseup?: string | undefined;
            onpaste?: string | undefined;
            onpause?: string | undefined;
            onplay?: string | undefined;
            onplaying?: string | undefined;
            onpointercancel?: string | undefined;
            onpointerdown?: string | undefined;
            onpointerenter?: string | undefined;
            onpointerleave?: string | undefined;
            onpointermove?: string | undefined;
            onpointerout?: string | undefined;
            onpointerover?: string | undefined;
            onpointerup?: string | undefined;
            onprogress?: string | undefined;
            onratechange?: string | undefined;
            onreset?: string | undefined;
            onresize?: string | undefined;
            onscroll?: string | undefined;
            onscrollend?: string | undefined;
            onsecuritypolicyviolation?: string | undefined;
            onseeked?: string | undefined;
            onseeking?: string | undefined;
            onselect?: string | undefined;
            onselectionchange?: string | undefined;
            onselectstart?: string | undefined;
            onslotchange?: string | undefined;
            onstalled?: string | undefined;
            onsubmit?: string | undefined;
            onsuspend?: string | undefined;
            ontimeupdate?: string | undefined;
            ontoggle?: string | undefined;
            ontouchcancel?: string | undefined;
            ontouchend?: string | undefined;
            ontouchmove?: string | undefined;
            ontouchstart?: string | undefined;
            ontransitioncancel?: string | undefined;
            ontransitionend?: string | undefined;
            ontransitionrun?: string | undefined;
            ontransitionstart?: string | undefined;
            onvolumechange?: string | undefined;
            onwaiting?: string | undefined;
            onwebkitanimationend?: string | undefined;
            onwebkitanimationiteration?: string | undefined;
            onwebkitanimationstart?: string | undefined;
            onwebkittransitionend?: string | undefined;
            onwheel?: string | undefined;
            autofocus?: string | undefined;
            readonly dataset?: string | undefined;
            nonce?: string | undefined;
            tabIndex?: string | undefined;
            blur?: string | undefined;
            focus?: string | undefined;
            readonly group?: SVGGElement | null;
            readonly mainElement?: SVGElementTagNameMap[T];
            _setStyleAttribute?: string | undefined;
            readonly _styleAttributes?: { [Key in keyof this]?: string; };
            readonly svgContainer?: SVGSVGElement | null;
            readonly svgContainerController?: import("./svgSVG").SVGSVGController | null;
        };
        readonly svgContainer: SVGSVGElement | null;
        readonly svgContainerController: import("./svgSVG").SVGSVGController | null;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        _updateOffset(): void;
        origin: "center" | "topLeft";
        connectedCallback: (() => void) & (() => void) & (() => void);
        moveOffset: ((x: number, y: number) => void) & ((x: number, y: number) => void);
        offset: import("../..").Vector2D;
        "__#26@#main": SVGStopElement | SVGLinearGradientElement | SVGSVGElement | SVGRadialGradientElement | SVGGElement | SVGSymbolElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGTextElement | SVGTitleElement | SVGAnimateElement | SVGStyleElement | SVGAElement | SVGAnimateMotionElement | SVGAnimateTransformElement | SVGCircleElement | SVGClipPathElement | SVGDefsElement | SVGDescElement | SVGFEBlendElement | SVGFEColorMatrixElement | SVGFEComponentTransferElement | SVGFECompositeElement | SVGFEConvolveMatrixElement | SVGFEDiffuseLightingElement | SVGFEDisplacementMapElement | SVGFEDistantLightElement | SVGFEDropShadowElement | SVGFEFloodElement | SVGFEFuncAElement | SVGFEFuncBElement | SVGFEFuncGElement | SVGFEFuncRElement | SVGFEGaussianBlurElement | SVGFEImageElement | SVGFEMergeElement | SVGFEMergeNodeElement | SVGFEMorphologyElement | SVGFEOffsetElement | SVGFEPointLightElement | SVGFESpecularLightingElement | SVGFESpotLightElement | SVGFETileElement | SVGFETurbulenceElement | SVGFilterElement | SVGForeignObjectElement | SVGMarkerElement | SVGMaskElement | SVGMetadataElement | SVGMPathElement | SVGPathElement | SVGPatternElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGScriptElement | SVGSetElement | SVGSwitchElement | SVGTextPathElement | SVGTSpanElement | SVGUseElement | SVGViewElement;
        "__#26@#group": SVGGElement | null;
        addEventListener: ((type: keyof SVGElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void) & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        };
        removeEventListener: ((type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void) & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        };
        appendChild: (<T extends Node>(node: T) => T) & (<T extends Node>(node: T) => T);
        attributeChangedCallback: (() => void) & ((name: string, oldValue: string | null, newValue: string | null) => void) & ((name: string, oldValue: string | null, newValue: string | null) => void) & ((name: string, oldValue: string | null, newValue: string | null) => void) & ((name: string, oldValue: string | null, newValue: string | null) => void);
        "__#26@#attachMain"(): void;
        "__#26@#createGroup"(): SVGGElement;
        readonly group: SVGGElement | null;
        readonly mainElement: SVGElementTagNameMap[T];
        _setStyleAttribute(attributeName: string, value: string): void;
        readonly _styleAttributes: {
            _updateOffset?: string | undefined;
            origin?: "center" | "topLeft";
            connectedCallback?: string | undefined;
            moveOffset?: string | undefined;
            offset?: import("../..").Vector2D;
            addEventListener?: string | undefined;
            removeEventListener?: string | undefined;
            appendChild?: string | undefined;
            attributeChangedCallback?: string | undefined;
            readonly group?: SVGGElement | null;
            readonly mainElement?: SVGElementTagNameMap[T];
            _setStyleAttribute?: string | undefined;
            readonly _styleAttributes?: { [Key in keyof this]?: string; };
            readonly svgContainer?: SVGSVGElement | null;
            readonly svgContainerController?: import("./svgSVG").SVGSVGController | null;
            createChild?: string | undefined;
            registerChange?: string | undefined;
            accessKey?: string | undefined;
            readonly accessKeyLabel?: string | undefined;
            autocapitalize?: string | undefined;
            dir?: string | undefined;
            draggable?: string | undefined;
            hidden?: string | undefined;
            inert?: string | undefined;
            innerText?: string | undefined;
            lang?: string | undefined;
            readonly offsetHeight?: string | undefined;
            readonly offsetLeft?: string | undefined;
            readonly offsetParent?: string | undefined;
            readonly offsetTop?: string | undefined;
            readonly offsetWidth?: string | undefined;
            outerText?: string | undefined;
            popover?: string | undefined;
            spellcheck?: string | undefined;
            title?: string | undefined;
            translate?: string | undefined;
            writingSuggestions?: string | undefined;
            attachInternals?: string | undefined;
            click?: string | undefined;
            hidePopover?: string | undefined;
            showPopover?: string | undefined;
            togglePopover?: string | undefined;
            readonly attributes?: string | undefined;
            readonly classList?: string | undefined;
            className?: string | undefined;
            readonly clientHeight?: string | undefined;
            readonly clientLeft?: string | undefined;
            readonly clientTop?: string | undefined;
            readonly clientWidth?: string | undefined;
            readonly currentCSSZoom?: string | undefined;
            id?: string | undefined;
            innerHTML?: string | undefined;
            readonly localName?: string | undefined;
            readonly namespaceURI?: string | undefined;
            onfullscreenchange?: string | undefined;
            onfullscreenerror?: string | undefined;
            outerHTML?: string | undefined;
            readonly ownerDocument?: string | undefined;
            readonly part?: string | undefined;
            readonly prefix?: string | undefined;
            readonly scrollHeight?: string | undefined;
            scrollLeft?: string | undefined;
            scrollTop?: string | undefined;
            readonly scrollWidth?: string | undefined;
            readonly shadowRoot?: string | undefined;
            slot?: string | undefined;
            readonly tagName?: string | undefined;
            attachShadow?: string | undefined;
            checkVisibility?: string | undefined;
            closest?: string | undefined;
            computedStyleMap?: string | undefined;
            getAttribute?: string | undefined;
            getAttributeNS?: string | undefined;
            getAttributeNames?: string | undefined;
            getAttributeNode?: string | undefined;
            getAttributeNodeNS?: string | undefined;
            getBoundingClientRect?: string | undefined;
            getClientRects?: string | undefined;
            getElementsByClassName?: string | undefined;
            getElementsByTagName?: string | undefined;
            getElementsByTagNameNS?: string | undefined;
            getHTML?: string | undefined;
            hasAttribute?: string | undefined;
            hasAttributeNS?: string | undefined;
            hasAttributes?: string | undefined;
            hasPointerCapture?: string | undefined;
            insertAdjacentElement?: string | undefined;
            insertAdjacentHTML?: string | undefined;
            insertAdjacentText?: string | undefined;
            matches?: string | undefined;
            releasePointerCapture?: string | undefined;
            removeAttribute?: string | undefined;
            removeAttributeNS?: string | undefined;
            removeAttributeNode?: string | undefined;
            requestFullscreen?: string | undefined;
            requestPointerLock?: string | undefined;
            scroll?: string | undefined;
            scrollBy?: string | undefined;
            scrollIntoView?: string | undefined;
            scrollTo?: string | undefined;
            setAttribute?: string | undefined;
            setAttributeNS?: string | undefined;
            setAttributeNode?: string | undefined;
            setAttributeNodeNS?: string | undefined;
            setHTMLUnsafe?: string | undefined;
            setPointerCapture?: string | undefined;
            toggleAttribute?: string | undefined;
            webkitMatchesSelector?: string | undefined;
            readonly baseURI?: string | undefined;
            readonly childNodes?: string | undefined;
            readonly firstChild?: string | undefined;
            readonly isConnected?: string | undefined;
            readonly lastChild?: string | undefined;
            readonly nextSibling?: string | undefined;
            readonly nodeName?: string | undefined;
            readonly nodeType?: string | undefined;
            nodeValue?: string | undefined;
            readonly parentElement?: string | undefined;
            readonly parentNode?: string | undefined;
            readonly previousSibling?: string | undefined;
            textContent?: string | undefined;
            cloneNode?: string | undefined;
            compareDocumentPosition?: string | undefined;
            contains?: string | undefined;
            getRootNode?: string | undefined;
            hasChildNodes?: string | undefined;
            insertBefore?: string | undefined;
            isDefaultNamespace?: string | undefined;
            isEqualNode?: string | undefined;
            isSameNode?: string | undefined;
            lookupNamespaceURI?: string | undefined;
            lookupPrefix?: string | undefined;
            normalize?: string | undefined;
            removeChild?: string | undefined;
            replaceChild?: string | undefined;
            readonly ELEMENT_NODE?: string | undefined;
            readonly ATTRIBUTE_NODE?: string | undefined;
            readonly TEXT_NODE?: string | undefined;
            readonly CDATA_SECTION_NODE?: string | undefined;
            readonly ENTITY_REFERENCE_NODE?: string | undefined;
            readonly ENTITY_NODE?: string | undefined;
            readonly PROCESSING_INSTRUCTION_NODE?: string | undefined;
            readonly COMMENT_NODE?: string | undefined;
            readonly DOCUMENT_NODE?: string | undefined;
            readonly DOCUMENT_TYPE_NODE?: string | undefined;
            readonly DOCUMENT_FRAGMENT_NODE?: string | undefined;
            readonly NOTATION_NODE?: string | undefined;
            readonly DOCUMENT_POSITION_DISCONNECTED?: string | undefined;
            readonly DOCUMENT_POSITION_PRECEDING?: string | undefined;
            readonly DOCUMENT_POSITION_FOLLOWING?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINS?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINED_BY?: string | undefined;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: string | undefined;
            dispatchEvent?: string | undefined;
            ariaAtomic?: string | undefined;
            ariaAutoComplete?: string | undefined;
            ariaBrailleLabel?: string | undefined;
            ariaBrailleRoleDescription?: string | undefined;
            ariaBusy?: string | undefined;
            ariaChecked?: string | undefined;
            ariaColCount?: string | undefined;
            ariaColIndex?: string | undefined;
            ariaColIndexText?: string | undefined;
            ariaColSpan?: string | undefined;
            ariaCurrent?: string | undefined;
            ariaDescription?: string | undefined;
            ariaDisabled?: string | undefined;
            ariaExpanded?: string | undefined;
            ariaHasPopup?: string | undefined;
            ariaHidden?: string | undefined;
            ariaInvalid?: string | undefined;
            ariaKeyShortcuts?: string | undefined;
            ariaLabel?: string | undefined;
            ariaLevel?: string | undefined;
            ariaLive?: string | undefined;
            ariaModal?: string | undefined;
            ariaMultiLine?: string | undefined;
            ariaMultiSelectable?: string | undefined;
            ariaOrientation?: string | undefined;
            ariaPlaceholder?: string | undefined;
            ariaPosInSet?: string | undefined;
            ariaPressed?: string | undefined;
            ariaReadOnly?: string | undefined;
            ariaRequired?: string | undefined;
            ariaRoleDescription?: string | undefined;
            ariaRowCount?: string | undefined;
            ariaRowIndex?: string | undefined;
            ariaRowIndexText?: string | undefined;
            ariaRowSpan?: string | undefined;
            ariaSelected?: string | undefined;
            ariaSetSize?: string | undefined;
            ariaSort?: string | undefined;
            ariaValueMax?: string | undefined;
            ariaValueMin?: string | undefined;
            ariaValueNow?: string | undefined;
            ariaValueText?: string | undefined;
            role?: string | undefined;
            animate?: string | undefined;
            getAnimations?: string | undefined;
            after?: string | undefined;
            before?: string | undefined;
            remove?: string | undefined;
            replaceWith?: string | undefined;
            readonly nextElementSibling?: string | undefined;
            readonly previousElementSibling?: string | undefined;
            readonly childElementCount?: string | undefined;
            readonly children?: string | undefined;
            readonly firstElementChild?: string | undefined;
            readonly lastElementChild?: string | undefined;
            append?: string | undefined;
            prepend?: string | undefined;
            querySelector?: string | undefined;
            querySelectorAll?: string | undefined;
            replaceChildren?: string | undefined;
            readonly assignedSlot?: string | undefined;
            readonly attributeStyleMap?: string | undefined;
            readonly style?: string | undefined;
            contentEditable?: string | undefined;
            enterKeyHint?: string | undefined;
            inputMode?: string | undefined;
            readonly isContentEditable?: string | undefined;
            onabort?: string | undefined;
            onanimationcancel?: string | undefined;
            onanimationend?: string | undefined;
            onanimationiteration?: string | undefined;
            onanimationstart?: string | undefined;
            onauxclick?: string | undefined;
            onbeforeinput?: string | undefined;
            onbeforetoggle?: string | undefined;
            onblur?: string | undefined;
            oncancel?: string | undefined;
            oncanplay?: string | undefined;
            oncanplaythrough?: string | undefined;
            onchange?: string | undefined;
            onclick?: string | undefined;
            onclose?: string | undefined;
            oncontextlost?: string | undefined;
            oncontextmenu?: string | undefined;
            oncontextrestored?: string | undefined;
            oncopy?: string | undefined;
            oncuechange?: string | undefined;
            oncut?: string | undefined;
            ondblclick?: string | undefined;
            ondrag?: string | undefined;
            ondragend?: string | undefined;
            ondragenter?: string | undefined;
            ondragleave?: string | undefined;
            ondragover?: string | undefined;
            ondragstart?: string | undefined;
            ondrop?: string | undefined;
            ondurationchange?: string | undefined;
            onemptied?: string | undefined;
            onended?: string | undefined;
            onerror?: string | undefined;
            onfocus?: string | undefined;
            onformdata?: string | undefined;
            ongotpointercapture?: string | undefined;
            oninput?: string | undefined;
            oninvalid?: string | undefined;
            onkeydown?: string | undefined;
            onkeypress?: string | undefined;
            onkeyup?: string | undefined;
            onload?: string | undefined;
            onloadeddata?: string | undefined;
            onloadedmetadata?: string | undefined;
            onloadstart?: string | undefined;
            onlostpointercapture?: string | undefined;
            onmousedown?: string | undefined;
            onmouseenter?: string | undefined;
            onmouseleave?: string | undefined;
            onmousemove?: string | undefined;
            onmouseout?: string | undefined;
            onmouseover?: string | undefined;
            onmouseup?: string | undefined;
            onpaste?: string | undefined;
            onpause?: string | undefined;
            onplay?: string | undefined;
            onplaying?: string | undefined;
            onpointercancel?: string | undefined;
            onpointerdown?: string | undefined;
            onpointerenter?: string | undefined;
            onpointerleave?: string | undefined;
            onpointermove?: string | undefined;
            onpointerout?: string | undefined;
            onpointerover?: string | undefined;
            onpointerup?: string | undefined;
            onprogress?: string | undefined;
            onratechange?: string | undefined;
            onreset?: string | undefined;
            onresize?: string | undefined;
            onscroll?: string | undefined;
            onscrollend?: string | undefined;
            onsecuritypolicyviolation?: string | undefined;
            onseeked?: string | undefined;
            onseeking?: string | undefined;
            onselect?: string | undefined;
            onselectionchange?: string | undefined;
            onselectstart?: string | undefined;
            onslotchange?: string | undefined;
            onstalled?: string | undefined;
            onsubmit?: string | undefined;
            onsuspend?: string | undefined;
            ontimeupdate?: string | undefined;
            ontoggle?: string | undefined;
            ontouchcancel?: string | undefined;
            ontouchend?: string | undefined;
            ontouchmove?: string | undefined;
            ontouchstart?: string | undefined;
            ontransitioncancel?: string | undefined;
            ontransitionend?: string | undefined;
            ontransitionrun?: string | undefined;
            ontransitionstart?: string | undefined;
            onvolumechange?: string | undefined;
            onwaiting?: string | undefined;
            onwebkitanimationend?: string | undefined;
            onwebkitanimationiteration?: string | undefined;
            onwebkitanimationstart?: string | undefined;
            onwebkittransitionend?: string | undefined;
            onwheel?: string | undefined;
            autofocus?: string | undefined;
            readonly dataset?: string | undefined;
            nonce?: string | undefined;
            tabIndex?: string | undefined;
            blur?: string | undefined;
            focus?: string | undefined;
            height?: number;
            width?: number;
            readonly topLeft?: import("../..").Vector2D;
            readonly topRight?: import("../..").Vector2D;
            readonly center?: import("../..").Vector2D;
            readonly bottomLeft?: import("../..").Vector2D;
            readonly bottomRight?: import("../..").Vector2D;
        };
        readonly svgContainer: SVGSVGElement | null;
        readonly svgContainerController: import("./svgSVG").SVGSVGController | null;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
        "__#27@#offset": import("../..").Vector2D;
        "__#27@#offsetChangeListener": ChangeListener<import("../../classes/vector2d").Vector2DBase>;
        height: number;
        width: number;
        "__#18@#width": number;
        "__#18@#height": number;
        "__#19@#origin": "center" | "topLeft";
        readonly topLeft: import("../..").Vector2D;
        readonly topRight: import("../..").Vector2D;
        readonly center: import("../..").Vector2D;
        readonly bottomLeft: import("../..").Vector2D;
        readonly bottomRight: import("../..").Vector2D;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        createSVGControllerChild<E extends import("./svgBase").SVGElementController>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        rectangle(options?: Partial<SVGRectangleController>): SVGRectangleController;
        "__#26@#main": SVGStopElement | SVGLinearGradientElement | SVGSVGElement | SVGRadialGradientElement | SVGGElement | SVGSymbolElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGTextElement | SVGTitleElement | SVGAnimateElement | SVGStyleElement | SVGAElement | SVGAnimateMotionElement | SVGAnimateTransformElement | SVGCircleElement | SVGClipPathElement | SVGDefsElement | SVGDescElement | SVGFEBlendElement | SVGFEColorMatrixElement | SVGFEComponentTransferElement | SVGFECompositeElement | SVGFEConvolveMatrixElement | SVGFEDiffuseLightingElement | SVGFEDisplacementMapElement | SVGFEDistantLightElement | SVGFEDropShadowElement | SVGFEFloodElement | SVGFEFuncAElement | SVGFEFuncBElement | SVGFEFuncGElement | SVGFEFuncRElement | SVGFEGaussianBlurElement | SVGFEImageElement | SVGFEMergeElement | SVGFEMergeNodeElement | SVGFEMorphologyElement | SVGFEOffsetElement | SVGFEPointLightElement | SVGFESpecularLightingElement | SVGFESpotLightElement | SVGFETileElement | SVGFETurbulenceElement | SVGFilterElement | SVGForeignObjectElement | SVGMarkerElement | SVGMaskElement | SVGMetadataElement | SVGMPathElement | SVGPathElement | SVGPatternElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGScriptElement | SVGSetElement | SVGSwitchElement | SVGTextPathElement | SVGTSpanElement | SVGUseElement | SVGViewElement;
        "__#26@#group": SVGGElement | null;
        addEventListener(type: keyof SVGElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener(type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        appendChild<T extends Node>(node: T): T;
        attributeChangedCallback(): void;
        "__#26@#attachMain"(): void;
        connectedCallback(): void;
        "__#26@#createGroup"(): SVGGElement;
        readonly group: SVGGElement | null;
        readonly mainElement: SVGElementTagNameMap[T];
        _setStyleAttribute(attributeName: string, value: string): void;
        readonly _styleAttributes: {
            createSVGControllerChild?: string | undefined;
            rectangle?: string | undefined;
            addEventListener?: string | undefined;
            removeEventListener?: string | undefined;
            appendChild?: string | undefined;
            attributeChangedCallback?: string | undefined;
            connectedCallback?: string | undefined;
            readonly group?: SVGGElement | null;
            readonly mainElement?: SVGElementTagNameMap[T];
            _setStyleAttribute?: string | undefined;
            readonly _styleAttributes?: { [Key in keyof this]?: string; };
            readonly svgContainer?: SVGSVGElement | null;
            readonly svgContainerController?: import("./svgSVG").SVGSVGController | null;
            createChild?: string | undefined;
            registerChange?: string | undefined;
            accessKey?: string | undefined;
            readonly accessKeyLabel?: string | undefined;
            autocapitalize?: string | undefined;
            dir?: string | undefined;
            draggable?: string | undefined;
            hidden?: string | undefined;
            inert?: string | undefined;
            innerText?: string | undefined;
            lang?: string | undefined;
            readonly offsetHeight?: string | undefined;
            readonly offsetLeft?: string | undefined;
            readonly offsetParent?: string | undefined;
            readonly offsetTop?: string | undefined;
            readonly offsetWidth?: string | undefined;
            outerText?: string | undefined;
            popover?: string | undefined;
            spellcheck?: string | undefined;
            title?: string | undefined;
            translate?: string | undefined;
            writingSuggestions?: string | undefined;
            attachInternals?: string | undefined;
            click?: string | undefined;
            hidePopover?: string | undefined;
            showPopover?: string | undefined;
            togglePopover?: string | undefined;
            readonly attributes?: string | undefined;
            readonly classList?: string | undefined;
            className?: string | undefined;
            readonly clientHeight?: string | undefined;
            readonly clientLeft?: string | undefined;
            readonly clientTop?: string | undefined;
            readonly clientWidth?: string | undefined;
            readonly currentCSSZoom?: string | undefined;
            id?: string | undefined;
            innerHTML?: string | undefined;
            readonly localName?: string | undefined;
            readonly namespaceURI?: string | undefined;
            onfullscreenchange?: string | undefined;
            onfullscreenerror?: string | undefined;
            outerHTML?: string | undefined;
            readonly ownerDocument?: string | undefined;
            readonly part?: string | undefined;
            readonly prefix?: string | undefined;
            readonly scrollHeight?: string | undefined;
            scrollLeft?: string | undefined;
            scrollTop?: string | undefined;
            readonly scrollWidth?: string | undefined;
            readonly shadowRoot?: string | undefined;
            slot?: string | undefined;
            readonly tagName?: string | undefined;
            attachShadow?: string | undefined;
            checkVisibility?: string | undefined;
            closest?: string | undefined;
            computedStyleMap?: string | undefined;
            getAttribute?: string | undefined;
            getAttributeNS?: string | undefined;
            getAttributeNames?: string | undefined;
            getAttributeNode?: string | undefined;
            getAttributeNodeNS?: string | undefined;
            getBoundingClientRect?: string | undefined;
            getClientRects?: string | undefined;
            getElementsByClassName?: string | undefined;
            getElementsByTagName?: string | undefined;
            getElementsByTagNameNS?: string | undefined;
            getHTML?: string | undefined;
            hasAttribute?: string | undefined;
            hasAttributeNS?: string | undefined;
            hasAttributes?: string | undefined;
            hasPointerCapture?: string | undefined;
            insertAdjacentElement?: string | undefined;
            insertAdjacentHTML?: string | undefined;
            insertAdjacentText?: string | undefined;
            matches?: string | undefined;
            releasePointerCapture?: string | undefined;
            removeAttribute?: string | undefined;
            removeAttributeNS?: string | undefined;
            removeAttributeNode?: string | undefined;
            requestFullscreen?: string | undefined;
            requestPointerLock?: string | undefined;
            scroll?: string | undefined;
            scrollBy?: string | undefined;
            scrollIntoView?: string | undefined;
            scrollTo?: string | undefined;
            setAttribute?: string | undefined;
            setAttributeNS?: string | undefined;
            setAttributeNode?: string | undefined;
            setAttributeNodeNS?: string | undefined;
            setHTMLUnsafe?: string | undefined;
            setPointerCapture?: string | undefined;
            toggleAttribute?: string | undefined;
            webkitMatchesSelector?: string | undefined;
            readonly baseURI?: string | undefined;
            readonly childNodes?: string | undefined;
            readonly firstChild?: string | undefined;
            readonly isConnected?: string | undefined;
            readonly lastChild?: string | undefined;
            readonly nextSibling?: string | undefined;
            readonly nodeName?: string | undefined;
            readonly nodeType?: string | undefined;
            nodeValue?: string | undefined;
            readonly parentElement?: string | undefined;
            readonly parentNode?: string | undefined;
            readonly previousSibling?: string | undefined;
            textContent?: string | undefined;
            cloneNode?: string | undefined;
            compareDocumentPosition?: string | undefined;
            contains?: string | undefined;
            getRootNode?: string | undefined;
            hasChildNodes?: string | undefined;
            insertBefore?: string | undefined;
            isDefaultNamespace?: string | undefined;
            isEqualNode?: string | undefined;
            isSameNode?: string | undefined;
            lookupNamespaceURI?: string | undefined;
            lookupPrefix?: string | undefined;
            normalize?: string | undefined;
            removeChild?: string | undefined;
            replaceChild?: string | undefined;
            readonly ELEMENT_NODE?: string | undefined;
            readonly ATTRIBUTE_NODE?: string | undefined;
            readonly TEXT_NODE?: string | undefined;
            readonly CDATA_SECTION_NODE?: string | undefined;
            readonly ENTITY_REFERENCE_NODE?: string | undefined;
            readonly ENTITY_NODE?: string | undefined;
            readonly PROCESSING_INSTRUCTION_NODE?: string | undefined;
            readonly COMMENT_NODE?: string | undefined;
            readonly DOCUMENT_NODE?: string | undefined;
            readonly DOCUMENT_TYPE_NODE?: string | undefined;
            readonly DOCUMENT_FRAGMENT_NODE?: string | undefined;
            readonly NOTATION_NODE?: string | undefined;
            readonly DOCUMENT_POSITION_DISCONNECTED?: string | undefined;
            readonly DOCUMENT_POSITION_PRECEDING?: string | undefined;
            readonly DOCUMENT_POSITION_FOLLOWING?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINS?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINED_BY?: string | undefined;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: string | undefined;
            dispatchEvent?: string | undefined;
            ariaAtomic?: string | undefined;
            ariaAutoComplete?: string | undefined;
            ariaBrailleLabel?: string | undefined;
            ariaBrailleRoleDescription?: string | undefined;
            ariaBusy?: string | undefined;
            ariaChecked?: string | undefined;
            ariaColCount?: string | undefined;
            ariaColIndex?: string | undefined;
            ariaColIndexText?: string | undefined;
            ariaColSpan?: string | undefined;
            ariaCurrent?: string | undefined;
            ariaDescription?: string | undefined;
            ariaDisabled?: string | undefined;
            ariaExpanded?: string | undefined;
            ariaHasPopup?: string | undefined;
            ariaHidden?: string | undefined;
            ariaInvalid?: string | undefined;
            ariaKeyShortcuts?: string | undefined;
            ariaLabel?: string | undefined;
            ariaLevel?: string | undefined;
            ariaLive?: string | undefined;
            ariaModal?: string | undefined;
            ariaMultiLine?: string | undefined;
            ariaMultiSelectable?: string | undefined;
            ariaOrientation?: string | undefined;
            ariaPlaceholder?: string | undefined;
            ariaPosInSet?: string | undefined;
            ariaPressed?: string | undefined;
            ariaReadOnly?: string | undefined;
            ariaRequired?: string | undefined;
            ariaRoleDescription?: string | undefined;
            ariaRowCount?: string | undefined;
            ariaRowIndex?: string | undefined;
            ariaRowIndexText?: string | undefined;
            ariaRowSpan?: string | undefined;
            ariaSelected?: string | undefined;
            ariaSetSize?: string | undefined;
            ariaSort?: string | undefined;
            ariaValueMax?: string | undefined;
            ariaValueMin?: string | undefined;
            ariaValueNow?: string | undefined;
            ariaValueText?: string | undefined;
            role?: string | undefined;
            animate?: string | undefined;
            getAnimations?: string | undefined;
            after?: string | undefined;
            before?: string | undefined;
            remove?: string | undefined;
            replaceWith?: string | undefined;
            readonly nextElementSibling?: string | undefined;
            readonly previousElementSibling?: string | undefined;
            readonly childElementCount?: string | undefined;
            readonly children?: string | undefined;
            readonly firstElementChild?: string | undefined;
            readonly lastElementChild?: string | undefined;
            append?: string | undefined;
            prepend?: string | undefined;
            querySelector?: string | undefined;
            querySelectorAll?: string | undefined;
            replaceChildren?: string | undefined;
            readonly assignedSlot?: string | undefined;
            readonly attributeStyleMap?: string | undefined;
            readonly style?: string | undefined;
            contentEditable?: string | undefined;
            enterKeyHint?: string | undefined;
            inputMode?: string | undefined;
            readonly isContentEditable?: string | undefined;
            onabort?: string | undefined;
            onanimationcancel?: string | undefined;
            onanimationend?: string | undefined;
            onanimationiteration?: string | undefined;
            onanimationstart?: string | undefined;
            onauxclick?: string | undefined;
            onbeforeinput?: string | undefined;
            onbeforetoggle?: string | undefined;
            onblur?: string | undefined;
            oncancel?: string | undefined;
            oncanplay?: string | undefined;
            oncanplaythrough?: string | undefined;
            onchange?: string | undefined;
            onclick?: string | undefined;
            onclose?: string | undefined;
            oncontextlost?: string | undefined;
            oncontextmenu?: string | undefined;
            oncontextrestored?: string | undefined;
            oncopy?: string | undefined;
            oncuechange?: string | undefined;
            oncut?: string | undefined;
            ondblclick?: string | undefined;
            ondrag?: string | undefined;
            ondragend?: string | undefined;
            ondragenter?: string | undefined;
            ondragleave?: string | undefined;
            ondragover?: string | undefined;
            ondragstart?: string | undefined;
            ondrop?: string | undefined;
            ondurationchange?: string | undefined;
            onemptied?: string | undefined;
            onended?: string | undefined;
            onerror?: string | undefined;
            onfocus?: string | undefined;
            onformdata?: string | undefined;
            ongotpointercapture?: string | undefined;
            oninput?: string | undefined;
            oninvalid?: string | undefined;
            onkeydown?: string | undefined;
            onkeypress?: string | undefined;
            onkeyup?: string | undefined;
            onload?: string | undefined;
            onloadeddata?: string | undefined;
            onloadedmetadata?: string | undefined;
            onloadstart?: string | undefined;
            onlostpointercapture?: string | undefined;
            onmousedown?: string | undefined;
            onmouseenter?: string | undefined;
            onmouseleave?: string | undefined;
            onmousemove?: string | undefined;
            onmouseout?: string | undefined;
            onmouseover?: string | undefined;
            onmouseup?: string | undefined;
            onpaste?: string | undefined;
            onpause?: string | undefined;
            onplay?: string | undefined;
            onplaying?: string | undefined;
            onpointercancel?: string | undefined;
            onpointerdown?: string | undefined;
            onpointerenter?: string | undefined;
            onpointerleave?: string | undefined;
            onpointermove?: string | undefined;
            onpointerout?: string | undefined;
            onpointerover?: string | undefined;
            onpointerup?: string | undefined;
            onprogress?: string | undefined;
            onratechange?: string | undefined;
            onreset?: string | undefined;
            onresize?: string | undefined;
            onscroll?: string | undefined;
            onscrollend?: string | undefined;
            onsecuritypolicyviolation?: string | undefined;
            onseeked?: string | undefined;
            onseeking?: string | undefined;
            onselect?: string | undefined;
            onselectionchange?: string | undefined;
            onselectstart?: string | undefined;
            onslotchange?: string | undefined;
            onstalled?: string | undefined;
            onsubmit?: string | undefined;
            onsuspend?: string | undefined;
            ontimeupdate?: string | undefined;
            ontoggle?: string | undefined;
            ontouchcancel?: string | undefined;
            ontouchend?: string | undefined;
            ontouchmove?: string | undefined;
            ontouchstart?: string | undefined;
            ontransitioncancel?: string | undefined;
            ontransitionend?: string | undefined;
            ontransitionrun?: string | undefined;
            ontransitionstart?: string | undefined;
            onvolumechange?: string | undefined;
            onwaiting?: string | undefined;
            onwebkitanimationend?: string | undefined;
            onwebkitanimationiteration?: string | undefined;
            onwebkitanimationstart?: string | undefined;
            onwebkittransitionend?: string | undefined;
            onwheel?: string | undefined;
            autofocus?: string | undefined;
            readonly dataset?: string | undefined;
            nonce?: string | undefined;
            tabIndex?: string | undefined;
            blur?: string | undefined;
            focus?: string | undefined;
        };
        readonly svgContainer: SVGSVGElement | null;
        readonly svgContainerController: import("./svgSVG").SVGSVGController | null;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    observedAttributes: string[];
    tag: string;
} & {
    new (...args: any[]): {
        "__#26@#main": SVGRectElement;
        "__#26@#group": SVGGElement | null;
        addEventListener(type: keyof SVGElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener(type: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        appendChild<T extends Node>(node: T): T;
        attributeChangedCallback(): void;
        "__#26@#attachMain"(): void;
        connectedCallback(): void;
        "__#26@#createGroup"(): SVGGElement;
        readonly group: SVGGElement | null;
        readonly mainElement: SVGRectElement;
        _setStyleAttribute(attributeName: string, value: string): void;
        readonly _styleAttributes: {
            addEventListener?: string | undefined;
            removeEventListener?: string | undefined;
            appendChild?: string | undefined;
            attributeChangedCallback?: string | undefined;
            connectedCallback?: string | undefined;
            readonly group?: SVGGElement | null;
            readonly mainElement?: SVGRectElement;
            _setStyleAttribute?: string | undefined;
            readonly _styleAttributes?: string | undefined;
            readonly svgContainer?: SVGSVGElement | null;
            readonly svgContainerController?: import("./svgSVG").SVGSVGController | null;
            createChild?: string | undefined;
            registerChange?: string | undefined;
            accessKey?: string | undefined;
            readonly accessKeyLabel?: string | undefined;
            autocapitalize?: string | undefined;
            dir?: string | undefined;
            draggable?: string | undefined;
            hidden?: string | undefined;
            inert?: string | undefined;
            innerText?: string | undefined;
            lang?: string | undefined;
            readonly offsetHeight?: string | undefined;
            readonly offsetLeft?: string | undefined;
            readonly offsetParent?: string | undefined;
            readonly offsetTop?: string | undefined;
            readonly offsetWidth?: string | undefined;
            outerText?: string | undefined;
            popover?: string | undefined;
            spellcheck?: string | undefined;
            title?: string | undefined;
            translate?: string | undefined;
            writingSuggestions?: string | undefined;
            attachInternals?: string | undefined;
            click?: string | undefined;
            hidePopover?: string | undefined;
            showPopover?: string | undefined;
            togglePopover?: string | undefined;
            readonly attributes?: string | undefined;
            readonly classList?: string | undefined;
            className?: string | undefined;
            readonly clientHeight?: string | undefined;
            readonly clientLeft?: string | undefined;
            readonly clientTop?: string | undefined;
            readonly clientWidth?: string | undefined;
            readonly currentCSSZoom?: string | undefined;
            id?: string | undefined;
            innerHTML?: string | undefined;
            readonly localName?: string | undefined;
            readonly namespaceURI?: string | undefined;
            onfullscreenchange?: string | undefined;
            onfullscreenerror?: string | undefined;
            outerHTML?: string | undefined;
            readonly ownerDocument?: string | undefined;
            readonly part?: string | undefined;
            readonly prefix?: string | undefined;
            readonly scrollHeight?: string | undefined;
            scrollLeft?: string | undefined;
            scrollTop?: string | undefined;
            readonly scrollWidth?: string | undefined;
            readonly shadowRoot?: string | undefined;
            slot?: string | undefined;
            readonly tagName?: string | undefined;
            attachShadow?: string | undefined;
            checkVisibility?: string | undefined;
            closest?: string | undefined;
            computedStyleMap?: string | undefined;
            getAttribute?: string | undefined;
            getAttributeNS?: string | undefined;
            getAttributeNames?: string | undefined;
            getAttributeNode?: string | undefined;
            getAttributeNodeNS?: string | undefined;
            getBoundingClientRect?: string | undefined;
            getClientRects?: string | undefined;
            getElementsByClassName?: string | undefined;
            getElementsByTagName?: string | undefined;
            getElementsByTagNameNS?: string | undefined;
            getHTML?: string | undefined;
            hasAttribute?: string | undefined;
            hasAttributeNS?: string | undefined;
            hasAttributes?: string | undefined;
            hasPointerCapture?: string | undefined;
            insertAdjacentElement?: string | undefined;
            insertAdjacentHTML?: string | undefined;
            insertAdjacentText?: string | undefined;
            matches?: string | undefined;
            releasePointerCapture?: string | undefined;
            removeAttribute?: string | undefined;
            removeAttributeNS?: string | undefined;
            removeAttributeNode?: string | undefined;
            requestFullscreen?: string | undefined;
            requestPointerLock?: string | undefined;
            scroll?: string | undefined;
            scrollBy?: string | undefined;
            scrollIntoView?: string | undefined;
            scrollTo?: string | undefined;
            setAttribute?: string | undefined;
            setAttributeNS?: string | undefined;
            setAttributeNode?: string | undefined;
            setAttributeNodeNS?: string | undefined;
            setHTMLUnsafe?: string | undefined;
            setPointerCapture?: string | undefined;
            toggleAttribute?: string | undefined;
            webkitMatchesSelector?: string | undefined;
            readonly baseURI?: string | undefined;
            readonly childNodes?: string | undefined;
            readonly firstChild?: string | undefined;
            readonly isConnected?: string | undefined;
            readonly lastChild?: string | undefined;
            readonly nextSibling?: string | undefined;
            readonly nodeName?: string | undefined;
            readonly nodeType?: string | undefined;
            nodeValue?: string | undefined;
            readonly parentElement?: string | undefined;
            readonly parentNode?: string | undefined;
            readonly previousSibling?: string | undefined;
            textContent?: string | undefined;
            cloneNode?: string | undefined;
            compareDocumentPosition?: string | undefined;
            contains?: string | undefined;
            getRootNode?: string | undefined;
            hasChildNodes?: string | undefined;
            insertBefore?: string | undefined;
            isDefaultNamespace?: string | undefined;
            isEqualNode?: string | undefined;
            isSameNode?: string | undefined;
            lookupNamespaceURI?: string | undefined;
            lookupPrefix?: string | undefined;
            normalize?: string | undefined;
            removeChild?: string | undefined;
            replaceChild?: string | undefined;
            readonly ELEMENT_NODE?: string | undefined;
            readonly ATTRIBUTE_NODE?: string | undefined;
            readonly TEXT_NODE?: string | undefined;
            readonly CDATA_SECTION_NODE?: string | undefined;
            readonly ENTITY_REFERENCE_NODE?: string | undefined;
            readonly ENTITY_NODE?: string | undefined;
            readonly PROCESSING_INSTRUCTION_NODE?: string | undefined;
            readonly COMMENT_NODE?: string | undefined;
            readonly DOCUMENT_NODE?: string | undefined;
            readonly DOCUMENT_TYPE_NODE?: string | undefined;
            readonly DOCUMENT_FRAGMENT_NODE?: string | undefined;
            readonly NOTATION_NODE?: string | undefined;
            readonly DOCUMENT_POSITION_DISCONNECTED?: string | undefined;
            readonly DOCUMENT_POSITION_PRECEDING?: string | undefined;
            readonly DOCUMENT_POSITION_FOLLOWING?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINS?: string | undefined;
            readonly DOCUMENT_POSITION_CONTAINED_BY?: string | undefined;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: string | undefined;
            dispatchEvent?: string | undefined;
            ariaAtomic?: string | undefined;
            ariaAutoComplete?: string | undefined;
            ariaBrailleLabel?: string | undefined;
            ariaBrailleRoleDescription?: string | undefined;
            ariaBusy?: string | undefined;
            ariaChecked?: string | undefined;
            ariaColCount?: string | undefined;
            ariaColIndex?: string | undefined;
            ariaColIndexText?: string | undefined;
            ariaColSpan?: string | undefined;
            ariaCurrent?: string | undefined;
            ariaDescription?: string | undefined;
            ariaDisabled?: string | undefined;
            ariaExpanded?: string | undefined;
            ariaHasPopup?: string | undefined;
            ariaHidden?: string | undefined;
            ariaInvalid?: string | undefined;
            ariaKeyShortcuts?: string | undefined;
            ariaLabel?: string | undefined;
            ariaLevel?: string | undefined;
            ariaLive?: string | undefined;
            ariaModal?: string | undefined;
            ariaMultiLine?: string | undefined;
            ariaMultiSelectable?: string | undefined;
            ariaOrientation?: string | undefined;
            ariaPlaceholder?: string | undefined;
            ariaPosInSet?: string | undefined;
            ariaPressed?: string | undefined;
            ariaReadOnly?: string | undefined;
            ariaRequired?: string | undefined;
            ariaRoleDescription?: string | undefined;
            ariaRowCount?: string | undefined;
            ariaRowIndex?: string | undefined;
            ariaRowIndexText?: string | undefined;
            ariaRowSpan?: string | undefined;
            ariaSelected?: string | undefined;
            ariaSetSize?: string | undefined;
            ariaSort?: string | undefined;
            ariaValueMax?: string | undefined;
            ariaValueMin?: string | undefined;
            ariaValueNow?: string | undefined;
            ariaValueText?: string | undefined;
            role?: string | undefined;
            animate?: string | undefined;
            getAnimations?: string | undefined;
            after?: string | undefined;
            before?: string | undefined;
            remove?: string | undefined;
            replaceWith?: string | undefined;
            readonly nextElementSibling?: string | undefined;
            readonly previousElementSibling?: string | undefined;
            readonly childElementCount?: string | undefined;
            readonly children?: string | undefined;
            readonly firstElementChild?: string | undefined;
            readonly lastElementChild?: string | undefined;
            append?: string | undefined;
            prepend?: string | undefined;
            querySelector?: string | undefined;
            querySelectorAll?: string | undefined;
            replaceChildren?: string | undefined;
            readonly assignedSlot?: string | undefined;
            readonly attributeStyleMap?: string | undefined;
            readonly style?: string | undefined;
            contentEditable?: string | undefined;
            enterKeyHint?: string | undefined;
            inputMode?: string | undefined;
            readonly isContentEditable?: string | undefined;
            onabort?: string | undefined;
            onanimationcancel?: string | undefined;
            onanimationend?: string | undefined;
            onanimationiteration?: string | undefined;
            onanimationstart?: string | undefined;
            onauxclick?: string | undefined;
            onbeforeinput?: string | undefined;
            onbeforetoggle?: string | undefined;
            onblur?: string | undefined;
            oncancel?: string | undefined;
            oncanplay?: string | undefined;
            oncanplaythrough?: string | undefined;
            onchange?: string | undefined;
            onclick?: string | undefined;
            onclose?: string | undefined;
            oncontextlost?: string | undefined;
            oncontextmenu?: string | undefined;
            oncontextrestored?: string | undefined;
            oncopy?: string | undefined;
            oncuechange?: string | undefined;
            oncut?: string | undefined;
            ondblclick?: string | undefined;
            ondrag?: string | undefined;
            ondragend?: string | undefined;
            ondragenter?: string | undefined;
            ondragleave?: string | undefined;
            ondragover?: string | undefined;
            ondragstart?: string | undefined;
            ondrop?: string | undefined;
            ondurationchange?: string | undefined;
            onemptied?: string | undefined;
            onended?: string | undefined;
            onerror?: string | undefined;
            onfocus?: string | undefined;
            onformdata?: string | undefined;
            ongotpointercapture?: string | undefined;
            oninput?: string | undefined;
            oninvalid?: string | undefined;
            onkeydown?: string | undefined;
            onkeypress?: string | undefined;
            onkeyup?: string | undefined;
            onload?: string | undefined;
            onloadeddata?: string | undefined;
            onloadedmetadata?: string | undefined;
            onloadstart?: string | undefined;
            onlostpointercapture?: string | undefined;
            onmousedown?: string | undefined;
            onmouseenter?: string | undefined;
            onmouseleave?: string | undefined;
            onmousemove?: string | undefined;
            onmouseout?: string | undefined;
            onmouseover?: string | undefined;
            onmouseup?: string | undefined;
            onpaste?: string | undefined;
            onpause?: string | undefined;
            onplay?: string | undefined;
            onplaying?: string | undefined;
            onpointercancel?: string | undefined;
            onpointerdown?: string | undefined;
            onpointerenter?: string | undefined;
            onpointerleave?: string | undefined;
            onpointermove?: string | undefined;
            onpointerout?: string | undefined;
            onpointerover?: string | undefined;
            onpointerup?: string | undefined;
            onprogress?: string | undefined;
            onratechange?: string | undefined;
            onreset?: string | undefined;
            onresize?: string | undefined;
            onscroll?: string | undefined;
            onscrollend?: string | undefined;
            onsecuritypolicyviolation?: string | undefined;
            onseeked?: string | undefined;
            onseeking?: string | undefined;
            onselect?: string | undefined;
            onselectionchange?: string | undefined;
            onselectstart?: string | undefined;
            onslotchange?: string | undefined;
            onstalled?: string | undefined;
            onsubmit?: string | undefined;
            onsuspend?: string | undefined;
            ontimeupdate?: string | undefined;
            ontoggle?: string | undefined;
            ontouchcancel?: string | undefined;
            ontouchend?: string | undefined;
            ontouchmove?: string | undefined;
            ontouchstart?: string | undefined;
            ontransitioncancel?: string | undefined;
            ontransitionend?: string | undefined;
            ontransitionrun?: string | undefined;
            ontransitionstart?: string | undefined;
            onvolumechange?: string | undefined;
            onwaiting?: string | undefined;
            onwebkitanimationend?: string | undefined;
            onwebkitanimationiteration?: string | undefined;
            onwebkitanimationstart?: string | undefined;
            onwebkittransitionend?: string | undefined;
            onwheel?: string | undefined;
            autofocus?: string | undefined;
            readonly dataset?: string | undefined;
            nonce?: string | undefined;
            tabIndex?: string | undefined;
            blur?: string | undefined;
            focus?: string | undefined;
        };
        readonly svgContainer: SVGSVGElement | null;
        readonly svgContainerController: import("./svgSVG").SVGSVGController | null;
        createChild<E extends typeof import("../mixable").CustomHTMLElement>(ElementClass: E, options?: Partial<Writeable<InstanceType<E>>> | undefined): InstanceType<E>;
        registerChange<P extends keyof /*elided*/ any>(propertyName: P, newValue: /*elided*/ any[P]): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        writingSuggestions: string;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        readonly currentCSSZoom: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        closest<E extends Element = Element>(selectors: string): E | null;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        getHTML(options?: GetHTMLOptions): string;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
        insertAdjacentHTML(position: InsertPosition, string: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(options?: PointerLockOptions): Promise<void>;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setHTMLUnsafe(html: string): void;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(node: T, child: Node | null): T;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(child: T): T;
        replaceChild<T extends Node>(node: Node, child: T): T;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColIndexText: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowIndexText: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (Node | string)[]): void;
        before(...nodes: (Node | string)[]): void;
        remove(): void;
        replaceWith(...nodes: (Node | string)[]): void;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (Node | string)[]): void;
        prepend(...nodes: (Node | string)[]): void;
        querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        replaceChildren(...nodes: (Node | string)[]): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    observedAttributes: string[];
    tag: string;
};
export declare class SVGRectangleController extends SVGRectangleController_base {
    get origin(): "center" | "topLeft";
    set origin(value: "center" | "topLeft");
}
export {};
